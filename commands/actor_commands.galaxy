//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @nmosfet
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// Actor commands are implemented by actor messages and affect visuals
// General format for every actor command is
//      @cmd ->[target] [parameters ...]
// The ->[target] (or __[target]) is an optional actor reference as the
// target for an actor message send (defaults to ::Main which refers to the
// main actor for a unit)
//     ->[target] : local scope (confined to a single unit)
//     __[target] : global scope, refers to generic actor reference name
// The rest of the command is its unique parameter list

// Main actor for unit (default actor reference target)
static string LIBWYV_ACTOR_REF_MAIN = "->::Main";

// libwyv_has_actor_ref
// ===================
// Helper function to check if a paramater is a proper actor reference
// Syntax for reference and scope are:
//      >  "__[target]" : global reference
//      >  "->[target]" : local reference (single unit)
static bool libwyv_has_actor_ref(string ref) {
	string scope;
	if( ref != "" ) { // disregard if ref is invalid
		scope = StringSub(ref, 1, 2);
		if( scope == "__" || scope == "->" ) {
			return true;
		}
	}

	return false;
}

// libwyv_apply_actormsg
// ======================
// Generic function to apply the internal actor msg to a group of units
// -> normally group of units will be the player context (units selected)
// Certain actor commands require special casing for the actor msgs applied,
// in which case this block is special cased in the actor command
// function (Galaxy highly limited in dealing with generic functions)
static void libwyv_apply_actormsg(int player, unitgroup g, string target, string cmd, string amsg) {
	if( StringSub(target, 1, 2) == "->" ) {
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, amsg);
			libwyv_unit_cache_update(UnitGroupLoopCurrent(), cmd, libwyv_player[player].chat_msg);
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	else { // "__[ref]", target global
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			ActorSend(ActorFrom(target), amsg);
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
}

// libwyv_command_actormessage
// =======================
// Sends an ActorMessage to a unit (main or a actor reference) or to a global reference
// Optional reference is either ->[reference] for local scope (within a unit scope)
//							or	__[reference] for global scope (any actor on map)
// Syntax: @actormsg ->/__[reference] [msg]
//
// An issue that isn't easily dealt with is that actor messages are
// case sensitive. Only way to allow case insensitive user inputs is to manually
// match user input to actual actor messages (many elseif), which is shitty
//
// TODO: convert to new generalized amsg target system?
bool libwyv_command_actormessage(bool testConds, bool runActions) {
	unitgroup g = libwyv_player[EventPlayer()].context;
	string target = StringWord( libwyv_player[EventPlayer()].chat_msg, 2);
	bool target_scope_global = false;
	string amsg;
	int amsg_start_word_index = 1;
	int amsg_start_index;

	if(target == "") {
		return true;
	}

	// check the actor message target:
	// target is specified by @actrmsg ->[Target] [msg] OR @actrmsg __[Target] [msg]
	// e.g. @actrmsg ->_Unit SetTint 250,0,0 or @actrmsg ->::Main SetTint 250,0,0
	// default will use target ::Main (the main actor for a unit)
	// -> indicates local scope (unit actor) whereas __ indicates a global scope
	else if( StringSub(target,1,2) == "__" ) {
		target = StringSub(target, 3, StringLength(target));
		amsg_start_word_index = 2;
		target_scope_global = true;
	}
	else if( StringSub(target,1,2) == "->" ) {
		target = StringSub(target, 3, StringLength(target));
		amsg_start_word_index = 2;
	}
	else { // default target is ::Main (local unit scope)
		target = "::Main";
	}

	// get the actor message string (remainder of line)
	amsg_start_index = StringLength(StringWord( libwyv_player[EventPlayer()].chat_msg, 1)) + 2;
	if( amsg_start_word_index == 2 ) {
		amsg_start_index += StringLength(StringWord( libwyv_player[EventPlayer()].chat_msg, 2)) + 1;
	}

	amsg = StringSub( libwyv_player[EventPlayer()].chat_msg, amsg_start_index, StringLength(libwyv_player[EventPlayer()].chat_msg));

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone()) {
		if( target_scope_global ) {
			ActorSend(ActorFrom(target), amsg);
		}
		else {
			ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, amsg);
			libwyv_unit_cache_update(UnitGroupLoopCurrent(), "@actormsg", libwyv_player[EventPlayer()].chat_msg);
		}
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();

	return true;
}

// libwyv_command_actoralias
// =======================
// wrapper for the AliasAdd actor msg to add actor aliases to a unit's actors.
// These can be referenced as actor references by other actor commands
// using ->[ref]
// syntax: @actoralias (->[ref]) [alias]
bool libwyv_command_actoralias(bool testConds, bool runActions) {
	string actoralias;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	// get actor alias
	actoralias = StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset);
	if( actoralias == "" ) {
		libwyv_print_error(EventPlayer(), "Actor alias cannot be blank");
		return false;
	}

	libwyv_apply_actormsg(EventPlayer(), libwyv_player[EventPlayer()].context, target, "@actoralias",
						  "AliasAdd " + actoralias);

	return true;
}

// libwyv_command_scale
// ====================
// sets the scale of a unit's main actor for all units in context (modified from Cortex Engine)
// Syntax: @scale (->[ref]) [x] [y] [z] [time-blend]
bool libwyv_command_scale(bool testConds, bool runActions) {
	fixed x = 0;
	fixed y = 0;
	fixed z  = 0;
	fixed time = 0;
	string param_x;
	string param_y;
	string param_z;
	string param_time;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	// get scale params "x y z time"
	param_x = StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset);
	param_y = StringWord(libwyv_player[EventPlayer()].chat_msg, 3 + param_offset);
	param_z = StringWord(libwyv_player[EventPlayer()].chat_msg, 4 + param_offset);
	param_time = StringWord(libwyv_player[EventPlayer()].chat_msg, 5 + param_offset);

	x = StringToFixed(param_x);
	y = StringToFixed(param_y);
	z = StringToFixed(param_z);

	if(y == 0.0) {
		y = x;
	}

	if(z == 0.0) {
		z = x;
	}

	// verify bounds.
	x = MinF( libwyv_settings.max_scale, x );
	x = MaxF( libwyv_settings.min_scale, x );

	y = MinF( libwyv_settings.max_scale, y );
	y = MaxF( libwyv_settings.min_scale, y );

	z = MinF( libwyv_settings.max_scale, z );
	z = MaxF( libwyv_settings.min_scale, z );

	// get blend time
	if( param_time != "" ) {
		time = StringToFixed(param_time);
	}

	libwyv_apply_actormsg(EventPlayer(), libwyv_player[EventPlayer()].context, target, "@scale",
						  "SetScale " + FixedToString(x, 4) + "," + FixedToString(y, 4)  + "," + FixedToString(z, 4) + " " + FixedToString(time, 3));
	return true;
}

// libwyv_command_tint
// =================
// sets the tint of a unit's main actor for all units in context
// Syntax: @tint (->[ref]) [R] [G] [B] [Opacity] [HDR] [time-blend]
// (modified from Cortex Engine)
bool libwyv_command_tint(bool testConds, bool runActions) {
	string paramR;
	string paramG;
	string paramB;
	string paramAlpha;
	string paramHDR;
	string paramT;
	// default parameters for @tint without any inputs are below
	int red = 255;
	int green = 255;
	int blue = 255;
	fixed alpha = 1.0;
	fixed hdr = 1.0;
	fixed duration = 0;

	unitgroup g = libwyv_player[EventPlayer()].context;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	paramR = StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset);
	paramG = StringWord(libwyv_player[EventPlayer()].chat_msg, 3 + param_offset);
	paramB = StringWord(libwyv_player[EventPlayer()].chat_msg, 4 + param_offset);
	paramAlpha = StringWord(libwyv_player[EventPlayer()].chat_msg, 5 + param_offset);
	paramHDR = StringWord(libwyv_player[EventPlayer()].chat_msg, 6 + param_offset);
	paramT = StringWord(libwyv_player[EventPlayer()].chat_msg, 7 + param_offset);

	// get red input
	if( paramR != "" ) {
		if( StringContains(paramR, "%", c_stringEnd, false) ) {
			paramR = StringSub(paramR, 1, StringLength(paramR)-1);
			red = FixedToInt( 255.0 * StringToFixed(paramR)/100.0 );
		} else {
			red = StringToInt(paramR);
		}
	}

	// get green input
	if( paramG != "" ) {
		if( StringContains(paramG, "%", c_stringEnd, false) ) {
			paramG = StringSub(paramG, 1, StringLength(paramG)-1);
			green = FixedToInt( 255.0 * StringToFixed(paramG)/100.0 );
		} else {
			green = StringToInt(paramG);
		}
	}

	// get blue input
	if( paramB != "" ) {
		if( StringContains(paramB, "%", c_stringEnd, false) ) {
			paramB = StringSub(paramB, 1, StringLength(paramB)-1);
			blue = FixedToInt( 255.0 * StringToFixed(paramB)/100.0 );
		} else {
			blue = StringToInt(paramB);
		}
	}

	// get alpha (opacity), from 0 to 1
	if( paramAlpha != "" ) {
		if( StringContains(paramAlpha, "%", c_stringEnd, false) ) {
			paramAlpha = StringSub(paramAlpha, 1, StringLength(paramAlpha)-1);
			alpha = StringToFixed(paramAlpha)/100.0;
		} else {
			alpha = StringToFixed(paramAlpha);
		}
	}

	// get HDR
	if( paramHDR != "" ) {
		hdr = StringToFixed(paramHDR);
	}

	// get blend time
	if( paramT != "" ) {
		duration = StringToFixed(paramT);
	}

	// apply tint actor msg to units
	if( StringSub(target, 1, 2) == "->" ) {
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target,
						"SetTintColor {" + IntToString(red) + "," + IntToString(green) + "," + IntToString(blue) + " " +
						FixedToString(hdr, c_fixedPrecisionAny) + "} {" + FixedToString(duration, c_fixedPrecisionAny) + "}");
			ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target,
						"SetOpacity {" + FixedToString(alpha, c_fixedPrecisionAny) + "} {" + FixedToString(duration, c_fixedPrecisionAny) + "}");
			libwyv_unit_cache_update(UnitGroupLoopCurrent(), "@tint", libwyv_player[EventPlayer()].chat_msg);
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	else { // "__[ref]", target global
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			ActorSend(ActorFrom(target),
						"SetTintColor {" + IntToString(red) + "," + IntToString(green) + "," + IntToString(blue) + " " +
						FixedToString(hdr, c_fixedPrecisionAny) + "} {" + FixedToString(duration, c_fixedPrecisionAny) + "}");
			ActorSend(ActorFrom(target),
						"SetOpacity {" + FixedToString(alpha, c_fixedPrecisionAny) + "} {" + FixedToString(duration, c_fixedPrecisionAny) + "}");
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}

	return true;
}

// libwyv_command_modelswap
// ======================
// Changes the model of the main actor of unit (modified from Cortex Engine)
// Syntax: @modelswap (->[ref]) [model] [variation]
bool libwyv_command_modelswap(bool testConds, bool runActions) {
	string model;
	string variation;
	string amsg;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	model = libwyv_catalog_get(c_gameCatalogModel, StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset));
	if(model == null) {
		libwyv_print_output(EventPlayer(), "<c val=\"ff0000\">Unable to swap model</c>: No such model exists.");
		return true;
	}
	amsg = "ModelSwap {" + model + "}";

	variation = StringWord(libwyv_player[EventPlayer()].chat_msg, 3 + param_offset);
	if( variation != "" && StringToInt(variation) >= 0 ) {
		amsg += " {" + variation + "}";
	}

	libwyv_apply_actormsg(EventPlayer(), libwyv_player[EventPlayer()].context, target, "@modelswap", amsg);

	return true;
}

// libwyv_command_play
// ================
// makes the main actor play an animation by applying an animgroup
// "@play reset" stops the animation
bool libwyv_command_play(bool testConds, bool runActions) {
	unitgroup g = libwyv_player[EventPlayer()].context;
	string val;
	string flags = "";
	string animgroup;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	val = StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset);
	val = StringCase(StringSub(val, 1, 1), true) + StringSub(val, 2, StringLength(val));

	// if @play [anim] [loop] , then set the flags for anim to PlayForever
	if( StringEqual(StringWord( libwyv_player[EventPlayer()].chat_msg, 3 + param_offset), "loop", c_stringNoCase) ) {
		flags = "PlayForever";
		animgroup = StringWord(libwyv_player[EventPlayer()].chat_msg, 4 + param_offset);
	}
	else {
		animgroup = StringWord(libwyv_player[EventPlayer()].chat_msg, 3 + param_offset);
	}

	animgroup = StringCase(StringSub(animgroup, 1, 1), true) + StringSub(animgroup, 2, StringLength(animgroup));

	// apply animgroup actor msg to units
	if( StringSub(target, 1, 2) == "->" ) {
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			if( StringEqual(val, "reset", c_stringNoCase) ) {
				ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, "AnimClear " + "libwyv_command_play");
			}
			else {
				ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, "AnimPlay libwyv_command_play " + val + " " + flags);
				if(animgroup != "") {
					ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, "AnimGroupRemoveAll");
					ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, "AnimGroupApply {" + animgroup + "}");
				}
			}
			libwyv_unit_cache_update(UnitGroupLoopCurrent(), "@play", libwyv_player[EventPlayer()].chat_msg);
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	else { // "__[ref]", target global
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			if( StringEqual(val, "reset", c_stringNoCase) ) {
				ActorSend(ActorFrom(target), "AnimClear " + "libwyv_command_play");
			}
			else {
				ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, "AnimPlay libwyv_command_play " + val + " " + flags);
				if(animgroup != "") {
					ActorSend(ActorFrom(target), "AnimGroupRemoveAll");
					ActorSend(ActorFrom(target), "AnimGroupApply {" + animgroup + "}");
				}
			}
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	return true;
}

// libwyv_command_animspeed
// ===================
// changes the animation speed of any animations
// a unit is playing (range is set as 0-10x default, 1)
bool libwyv_command_animspeed(bool testConds, bool runActions) {
	string speed;
	fixed anm_speed;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	// get animspeed time scale. if % at end, then apply a percent scale
	speed = StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset);
	if( StringContains( speed, "%", c_stringEnd, c_stringCase ) ) {
		anm_speed = StringToFixed( StringSub(speed, 1, StringLength(speed)-1) ) / 100;
	} else {
		anm_speed = StringToFixed( speed );
	}

	// apply bounds for animspeed between 0 and 10
	if( anm_speed < 0 ) {
		anm_speed = 0;
	}
	else if(anm_speed > 10) {
		anm_speed = 10;
	}

	// apply the animspeed
	libwyv_apply_actormsg(EventPlayer(), libwyv_player[EventPlayer()].context, target, "@animspeed",
						  libNtve_gf_AnimSetTimeScaleGlobal(anm_speed));

	return true;
}

// libwyv_command_rotate
// ==================
// applies a rotation on a unit (modified from Cortex Engine)
// (note: movement removes these rotations,
// so only really useful for static props)
bool libwyv_command_rotate(bool testConds, bool runActions) {
	fixed yaw;
	fixed pitch;
	fixed roll;
	fixed forwardX;
	fixed forwardY;
	fixed forwardZ;
	fixed upX;
	fixed upY;
	fixed upZ;
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	// calculate rotation vector parameters
	yaw = StringToFixed( StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset) );
	pitch = StringToFixed( StringWord(libwyv_player[EventPlayer()].chat_msg, 3 + param_offset) );
	roll = StringToFixed( StringWord(libwyv_player[EventPlayer()].chat_msg, 4 + param_offset) );

	forwardX = Sin(yaw);
	forwardY = -Sin(pitch) * Cos(yaw);
	forwardZ = Cos(pitch) * Cos(yaw);

	upX = -Cos(yaw) * Sin(roll);
	upY = -Sin(pitch) * Sin(yaw) * Sin(roll) + Cos(pitch) * Cos(roll);
	upZ = Cos(pitch) * Sin(yaw) * Sin(roll) + Sin(pitch) * Cos(roll);

	// apply the rotation actor msgs
	libwyv_apply_actormsg(EventPlayer(), libwyv_player[EventPlayer()].context, target, "@rotate",
						  libNtve_gf_SetRotation(forwardX, forwardY, forwardZ, upX, upY, upZ));
	return true;
}

// libwyv_command_statbars
// ==================
// sets a unit's statbars
// by default, turns statbars off.
// turns on if user specifies by "@statbars on"
bool libwyv_command_statbars(bool testConds, bool runActions) {
	string state = "";
	int param_offset = 0;
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		param_offset = 1;
	}

	// get statbars state ("on" -> turn on, anything else turns off)
	if(StringEqual(StringWord(libwyv_player[EventPlayer()].chat_msg, 2 + param_offset), "on", false)) {
		state = " 1"; // 1 == on
	}

	// apply the statbars actor msgs
	libwyv_apply_actormsg(EventPlayer(), libwyv_player[EventPlayer()].context, target, "@statbars",
						  "SetShowStatusBar" + state);
	return true;
}

// libwyv_command_attach
// =====================
// Attaches an actor or a model to a unit (modified @attach+ from Cortex Forge)
// Can optionally specify coordinate offsets, rotations, and site operations
// syntax: @attach (->[ref]) (-m) [Actor/Model] [Point_#] [offX] [offY] [offZ] (-r [rotX] [rotY] [rotZ]) [SOp1] [SOp2] [SOp3]...
bool libwyv_command_attach(bool testConds, bool runActions) {
	unitgroup g = libwyv_player[EventPlayer()].context;
	int parse_offset = 0;
	int x;
	string actr = "{}";
	string model = "{}";
	string scope;
	string apoint;
	string apoint_index = "";
	string offset = null;
	string rotation = null;
	string SOp;
	string siteops = "";
	string actormsg;
	string attachPoints = "Origin Center Damage Engine Hardpoint Head Hit Overhead RallyPoint StatusBar Left Right Target Turret TurretY TurretZ Upgrade Weapon WeaponLeft WeaponRight";
	string target = LIBWYV_ACTOR_REF_MAIN;

	// get actor reference target
	if( libwyv_has_actor_ref(StringWord(libwyv_player[EventPlayer()].chat_msg, 2)) ) {
		target = StringWord(libwyv_player[EventPlayer()].chat_msg, 2);
		parse_offset = 1;
	}

	if(StringWord( libwyv_player[EventPlayer()].chat_msg, 2 + parse_offset) == "") {
		return true;
	}
	else if(StringWord( libwyv_player[EventPlayer()].chat_msg, 2 + parse_offset) == "-m") {
		model = StringWord( libwyv_player[EventPlayer()].chat_msg, 3 + parse_offset);
	}
	else {
		actr = StringWord( libwyv_player[EventPlayer()].chat_msg, 2 + parse_offset);
	}

	if( actr == "listpoints" || model =="listpoints" ) {
		libwyv_print(PlayerGroupSingle(EventPlayer()), "<c val=\"00ff00\">Available attach points</c>:<n/>" + attachPoints);
		return true;
	}

	// check actor or model is valid
	if(StringWord( libwyv_player[EventPlayer()].chat_msg, 2 + parse_offset) == "-m") { //do catalog check for model
		model = libwyv_catalog_get(c_gameCatalogModel, model);
		if(model == null) {
			libwyv_print_output(EventPlayer(), "<c val=\"ff0000\">Unable to attach actor model</c>: No such model exists.");
			return true;
		}
		parse_offset += 1; // increase parse offset since model "-m" flag being used
	}
	else { // do catalog check for actor
		actr = libwyv_catalog_get(c_gameCatalogActor, actr);
		if(actr == null) {
			libwyv_print_output(EventPlayer(), "<c val=\"ff0000\">Unable to attach actor</c>: No such actor exists.");
			return true;
		}
		scope = CatalogEntryScope( c_gameCatalogActor, actr );
		if( scope == "CActorEventMacro" || scope == "CActorSound" ) {
			libwyv_print_output(EventPlayer(), "<c val=\"ff0000\">Unable to attach actor</c>: Invalid actor.");
			return true;
		}
	}

	//MODIFY ATTACH POINT STRING:
	//get apoint (attachment point)
	apoint = StringWord( libwyv_player[EventPlayer()].chat_msg, 3 + parse_offset);
	if( apoint == "" ) {
		apoint = "Origin";
	}
	if(StringContains(apoint, "_", c_stringAnywhere, c_stringNoCase)) {
		x = StringLength(apoint);
		while(StringSub(apoint, x, x) != "_") {
			x -= 1;
		}
		apoint_index = " " + StringSub(apoint, x+1, StringLength(apoint));
		apoint = StringSub(apoint, 1, x-1);
	}
	//check apoint is valid
	x = 1;
	while( StringWord(attachPoints, x) != "" ) {
		if( StringEqual(apoint, StringWord(attachPoints, x), false) ) {
			apoint = StringWord(attachPoints, x);
			x = -1;
			break;
		}
		x = x + 1;
	}

	if( x != -1 ) {
		apoint = "Origin";
		libwyv_print_output(EventPlayer(), "<c val=\"ff0000\">Warning</c>: Invalid attachment point, defaulting to Origin.<n/>You can obtain a list of attachment points by typing <c val=\"00ff00\">@attach listpoints</c>.");
	}

	//remake the apoint string
	apoint = "{" + apoint + apoint_index + "}";

	//check for offset (if specified)
	if(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset) != ""
		&& !StringContains(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset), "SOp", c_stringAnywhere, c_stringNoCase)
		&& StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset) != "-r") {
		x = 0;
		offset = "";
		while(x < 3) {
			if(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x) != "") {
				offset += "," + FixedToString(StringToFixed(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x)), c_fixedPrecisionAny);
			}
			else {
				offset += ",0";
			}

			x += 1;
		}
		offset = StringSub(offset, 2, StringLength(offset));
		parse_offset += 3;
	}

	//check for local rotation (if specified)
	if(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset) == "-r") {
		parse_offset += 1;
		x = 0;
		rotation = "";
		if(offset == null) {
			offset = "0,0,0";
		}
		while(x < 3) {
			if(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x) != "") {
				rotation += "," + FixedToString(StringToFixed(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x)), c_fixedPrecisionAny);
			}
			else {
				rotation += ",0";
			}

			x += 1;
		}
		rotation = StringSub(rotation, 2, StringLength(rotation));
		parse_offset += 3;
	}

	//keep checking for specified site ops until reached end of string
	if(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset) != "") {
		x = 0;
		while(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x) != "") {
			if(StringContains(StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x), "SOp", c_stringAnywhere, c_stringNoCase)) {
				SOp = StringWord( libwyv_player[EventPlayer()].chat_msg, 4 + parse_offset + x);
				SOp = libwyv_catalog_get(c_gameCatalogActor, SOp);
				if(SOp == null) {
					libwyv_print_output(EventPlayer(), "<c val=\"ff0000\">Warning: Encounted invalid or unknown Site Op: Skipping");
				}
				else {
					siteops = siteops + " " + SOp;
				}
			}
			x += 1;
		}
		if(siteops != "") {
			if(offset == null) {
				offset = "0,0,0";
			}
			if(rotation == null) {
				rotation = "{}";
			}
			siteops = StringSub(siteops, 2, StringLength(siteops));
			siteops = "{" + siteops + "}";
		}
	}

	//FINALLY create the actor msg (before send)
	actormsg = "AttachModelOffset " + actr + " " + model + " " + apoint;
	if(offset != null) {
		actormsg = actormsg + " " + offset;
	}
	if(rotation != null) {
		actormsg = actormsg + " " + rotation;
	}
	if(siteops != "") {
		actormsg = actormsg + " " + siteops;
	}

	// apply attach actor msg to units
	if( StringSub(target, 1, 2) == "->" ) {
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), target, actormsg);

			// TODO: need to generalize actors that shouldnt update cache
			if(!StringContains(actr, "TalkIcon", c_stringAnywhere, c_stringNoCase)) {
				libwyv_unit_cache_update(UnitGroupLoopCurrent(), "@attach", libwyv_player[EventPlayer()].chat_msg);
			}
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	else { // "__[ref]", target global
		target = StringSub(target, 3, StringLength(target));
		UnitGroupLoopBegin(g);
		while(!UnitGroupLoopDone()) {
			ActorSend(ActorFrom(target), actormsg);
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	return true;
}
