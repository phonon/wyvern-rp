//=========================================================
//		Raptor Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const string LIBRPTR_OUTPUT_SOUND_SUCCESS = "UI_CampaignNPCSelect";
const string LIBRPTR_OUTPUT_SOUND_ERROR = "UI_GenericError";

// librptr_print
// ===========================
// prints a (string) message to all for the custom overrided chat
void librptr_print(string msg, playergroup players) {
	UIDisplayMessage( players, c_messageAreaDebug, StringToText(msg) );
}

// librptr_print_text
// ===========================
// prints a (text) message to the chat
void librptr_print_text(text msg, playergroup players) {
	UIDisplayMessage( players, c_messageAreaDebug, msg );
}

// librptr_print_output
// ===========================
// prints a message proceeded by "> " to single player
// (used for various function output)
void librptr_print_output(string msg, int player) {
	UIDisplayMessage( PlayerGroupSingle(player), c_messageAreaDebug, StringToText("> " + msg) );
}

// librptr_print_success
// ===========================
// prints an success message to the chat
// (green tinted message)
void librptr_print_success(string msg, int player) {
	UIDisplayMessage( PlayerGroupSingle(player), c_messageAreaDebug, TextWithColor(StringToText("> " + msg), Color(0,250,0)) );
	SoundPlay(SoundLink(LIBRPTR_OUTPUT_SOUND_SUCCESS, -1), PlayerGroupSingle(player), 100.0, 0.0);
}

// librptr_print_error
// ===========================
// prints an error message to the chat
// (red tinted message)
void librptr_print_error(string msg, int player) {
	UIDisplayMessage( PlayerGroupSingle(player), c_messageAreaDebug, TextWithColor(StringToText("> [ERR] " + msg), Color(250,0,0)) );
	SoundPlay(SoundLink(LIBRPTR_OUTPUT_SOUND_ERROR, -1), PlayerGroupSingle(player), 100.0, 0.0);
}

// librptr_print_warning
// ===========================
// prints a warning message to the chat
// (yellow tinted message)
void librptr_print_warning(string msg, int player) {
	UIDisplayMessage( PlayerGroupSingle(player), c_messageAreaDebug, TextWithColor(StringToText("> [WARN] " + msg), Color(250,250,0)) );
	//SoundPlay(SoundLink(LIBRPTR_OUTPUT_SOUND_ERROR, -1), PlayerGroupSingle(player), 100.0, 0.0);
}

// librptr_chat_print_OOC
// ===========================
// prints an "out-of-character" message for all players in format
// "[OOC] [Clan-tag] [Player-Name]: [msg]"
void librptr_chat_print_OOC(string msg, int player) {
	text output;
	
	if( librptr_player[player].muted ) { return; }
	
	output = StringToText("[OOC] ") + librptr_player_name_colored(player) + StringToText(": ") + StringToText(msg);
	UIDisplayMessage( PlayerGroupAll(), c_messageAreaDebug, output );
}

