//=========================================================
//		Raptor Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

include "raptor/engine/chat/alias.galaxy"
include "raptor/engine/chat/templates.galaxy"
include "raptor/engine/chat/variables.galaxy"
include "raptor/engine/chat/cache.galaxy"
include "raptor/engine/chat/parser.galaxy"

// prototypes
bool librptr_process_chat_event(bool testConds, bool runActions);

// initializes the chat engine for a player
void librptr_chat_initialize_player(int player) {
	TriggerAddEventChatMessage( TriggerCreate("librptr_process_chat_event") , player, "", false );
}

// librptr_process_chat_event
// ============================
// redirects processing as needed:
// IF message begins with "<<" , directly output the message
// ELSE, parse message
bool librptr_process_chat_event(bool testConds, bool runActions) {
	unitgroup target = null;
	librptr_player[EventPlayer()].chat_msg = librptr_string_trim(EventChatMessage(false));
	
	// "<< " directly dumps message to OOC (if player not muted)
	if ( StringWord( librptr_player[EventPlayer()].chat_msg, 1) == "<<" &&  !librptr_player[EventPlayer()].muted ) {
		librptr_player[EventPlayer()].chat_msg = librptr_string_trim( StringSub(librptr_player[EventPlayer()].chat_msg, 3, StringLength(librptr_player[EventPlayer()].chat_msg)) );
		librptr_chat_print_OOC( librptr_player[EventPlayer()].chat_msg , EventPlayer());
	}
	else if( !librptr_player[EventPlayer()].disabled ) {
		// if player is not mouse-click spawning, set context to selected units
		if( !librptr_player[EventPlayer()].is_placing_unit ) {
			target = UnitGroupSelected(EventPlayer());
			// TODO: unit permissions (only affect personal units selected, or those with < permissions)
		}
		librptr_chat_parse(librptr_player[EventPlayer()].chat_msg, EventPlayer(), target, 0);
	}
	else if( !librptr_player[EventPlayer()].muted ){
		librptr_chat_print_OOC( librptr_player[EventPlayer()].chat_msg , EventPlayer());
	}
	
	// TODO: chat message logging 

	return false;
}
