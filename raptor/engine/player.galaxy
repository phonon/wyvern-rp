//=========================================================
//		Raptor Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// basic game player constants
const int LIBRPTR_MAX_PLAYERS = 16; // max players supported is 16 (0 - neutral, 15 - hostile)
const string LIBRPTR_PLAYER_BANK_NAME = "RaptorBank";
const int LIBRPTR_PLAYER_NEUTRAL = 0;
const int LIBRPTR_PLAYER_HOSTILE = 15;

// librptr_player_struct
// =======================
// contains all player properties
struct librptr_player_properties {

	// mouse_position
	// =================
	// Location of player mouse.
	point mouse_position;
	
	// chat_msg
	// ================
	// player chat message for parsing
	// when running a command, chat_msg is set to the command being run
	string chat_msg;
	
	// permission_level
	// =================
	// Permission level of a player (default - 0, mod - 1, admin - 2)
	int permission_level;
	
	// permission_allow
	// =================
	// String that contains single game instance of commands, 
	// delineated by spaces, of commands player CAN use
	// For a single game instance, these will transfer even if admin changes
	string permissions_allow;
	
	// permission_block
	// =================
	// String that contains single game instance of commands, 
	// delineated by spaces, of commands player CANNOT use
	// For a single game instance, these will transfer even if admin changes
	string permissions_block;
	
	// general permissions flags
	// ==================
	bool disabled;			// can player use any commands
	bool muted;				// can player chat (only applies to OOC)
	bool alias_blocked;		// can player use aliases system
	bool template_blocked;	// can player use template system

	// context
	// ===============
	// unitgroup target for running commands
	unitgroup context;
	
	// is_placing_unit
	// ===============
	// flag for using @spawn mouse-click style
	bool is_placing_unit;
	
	// spawn_splat
	// ==============
	// hovers under cursor for mouse-click @spawn placement
	unit spawn_splat;
	
	// is_placing_unit
	// ===============
	// flag for using _doodad
	bool is_placing_doodad;
	
	// doodad_splat
	// ==============
	// hovers under cursor for mouse-click _doodad placement
	actor doodad_splat;
	
	// bank_storage
	// ===============
	// player's bank containing things that persist between games
	// (aliases, templates, setups, etc...)
	bank bank_storage;
	
	// map_revealer
	// ===============
	// map revealer for entire map (revealers player specific)
	revealer map_revealer;
	
};

// librptr_player[LIBRPTR_MAX_PLAYERS]
// ====================================
// global array for players with index corresponding to player index
librptr_player_properties[LIBRPTR_MAX_PLAYERS] librptr_player;


// librptr_initialize_player
// ==============================
// initialize players (default settings)
void librptr_player_initialize(int player) {
	librptr_player[player].bank_storage = BankLoad( LIBRPTR_PLAYER_BANK_NAME, player );
	librptr_player[player].map_revealer = VisRevealerCreate(player, RegionEntireMap());
	librptr_player[player].mouse_position = RegionGetCenter( RegionEntireMap() );
	librptr_player[player].permission_level = LIBRPTR_PERMISSIONS_LEVEL_DEFAULT;
	
	librptr_player[player].spawn_splat = null;
	librptr_player[player].doodad_splat = null;
	
	CameraPan( player, RegionGetCenter(RegionEntireMap()), 0.0, 10.0, 10.0, false );
}

// librptr_player_name_colored
// ===========================
// returns a text string of player name with color
text librptr_player_name_colored(int player) {
	return TextWithColor( StringToText("<d Player=\"" + IntToString(player) + "\" GameValue=\"PlayerClanTag\"/> ") + PlayerName(player), ColorFromIndex( PlayerGetColorIndex(player, false), c_teamColorDiffuse) );	
}

// librptr_color_to_player_default
// ==========================
// Returns the default player index for a color string
int librptr_color_to_player_default(string colour)
{
	if( colour == "white" ) {
		return 0;
	} else if( colour == "red" ) {
		return 1;
	} else if( colour == "blue") {
		return 2;
	} else if( colour == "teal" ) {
		return 3;
	} else if( colour == "purple" ) {
		return 4;
	} else if( colour == "yellow" ) {
		return 5;
	} else if( colour == "orange" ) {
		return 6;
	} else if( colour == "green" ) {
		return 7;
	} else if( colour == "lightpink" ) {
		return 8;
	} else if( colour == "violet" ) {
		return 9;
	} else if( colour == "lightgrey" ) {
		return 10;
	} else if( colour == "lightgray" ) {
		return 10;
	} else if( colour == "darkgreen" ) {
		return 11;
	} else if( colour == "brown" ) {
		return 12;
	} else if( colour == "lightgreen" ) {
		return 13;
	} else if( colour == "darkgrey" ) {
		return 14; 
	} else if( colour == "darkgray" ) {
		return 14; 
	} else if( colour == "pink" ) {
		return 15;
	}

	return -1;
}

// librptr_color_to_player
// ===================
// Converts a color from a string to a player's index
// (since Blizzard has no function to get color of a player as a string)
int librptr_color_to_player(string colour) {
	int player = LIBRPTR_MAX_PLAYERS - 1;
	
	// special color keywords
	if( colour == "hostile" ) {
		return LIBRPTR_PLAYER_HOSTILE;
	} else if( colour == "neutral" ) {
		return LIBRPTR_PLAYER_NEUTRAL;
	} else if( colour == "me" ) {
		return EventPlayer();
	}
	
	while( player >= 0) {
		if( PlayerGetColorIndex( player, false ) == librptr_color_to_player_default(colour) && PlayerStatus(player) != c_playerStatusUnused) {
			return player;
		}
		player -= 1;
	}
	
	return -1;
}