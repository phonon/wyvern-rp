//=========================================================
//		Raptor Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// librptr_player_leaves
// ==================
// print message "[Player] has left the game"
// -> if player is admin, must promote a new admin
bool librptr_player_leaves(bool testConds, bool runActions) {
	int player = 1;
	playergroup active_players = PlayerGroupActive();
	
	librptr_print_text( librptr_player_name_colored(EventPlayer()) + StringToText(" has left the game"), PlayerGroupAll() );

	// if admin leaves, make another player the admin
	if( librptr_player[EventPlayer()].permission_level == LIBRPTR_PERMISSIONS_LEVEL_ADMIN ) {
		// demote player that left
		librptr_player[EventPlayer()].permission_level = LIBRPTR_PERMISSIONS_LEVEL_DEFAULT;
		
		// promote first moderator detected
		while( player < LIBRPTR_MAX_PLAYERS ) {
			if ( librptr_player[player].permission_level == LIBRPTR_PERMISSIONS_LEVEL_MOD ) {
				librptr_player[player].permission_level = LIBRPTR_PERMISSIONS_LEVEL_ADMIN;
				return true;
			}
			player += 1;
		}
		
		// otherwise promote random player (if there are players left)
		if( PlayerGroupCount(active_players) == 0 ) {
			return true;
		}
		player = PlayerGroupPlayer( active_players, RandomInt(1, PlayerGroupCount(active_players)) );
		librptr_player[player].permission_level = LIBRPTR_PERMISSIONS_LEVEL_ADMIN;
		librptr_print_text( librptr_player_name_colored(player) + StringToText(" has been promoted to admin"), PlayerGroupAll() );
	}
	// also demote any moderators
	else if( librptr_player[EventPlayer()].permission_level == LIBRPTR_PERMISSIONS_LEVEL_MOD ) {
		librptr_player[EventPlayer()].permission_level = LIBRPTR_PERMISSIONS_LEVEL_DEFAULT;
	}
	
	return true;
}
