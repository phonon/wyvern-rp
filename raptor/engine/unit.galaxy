//=========================================================
//		Raptor Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const int LIBRPTR_UNIT_INDEX_ID = 0;

const string LIBRPTR_UNIT_NAME_DATA_TABLE_IDENTIFIER = "_NAME";
const string LIBRPTR_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER = "_NAME_COLOR";

// Each unit given a unique id. Each time unit created, counter increments
int librptr_unit_id_counter = 0;

// librptr_unit_set_id
// =====================
// sets the unit's id via the custom value stored for unit
void librptr_unit_set_id(unit u) {
	UnitSetCustomValue( u, LIBRPTR_UNIT_INDEX_ID, IntToFixed(librptr_unit_id_counter));
	librptr_unit_id_counter += 1;
}

// librptr_unit_id
// =====================
// returns the unit's id as a string
string librptr_unit_id(unit u) {
	return FixedToString(UnitGetCustomValue(u, LIBRPTR_UNIT_INDEX_ID), 0);
}

// librptr_unit_create
// =====================
// function for creating units, sets id and adds unit to player's context
// used for @spawn command
void librptr_unit_create(string type, int player, point p, fixed facing) {
	UnitCreate(1, type, c_unitCreateIgnorePlacement, player, p, facing);
	librptr_unit_set_id(UnitLastCreated());
	UnitGroupAdd(librptr_player[EventPlayer()].context, UnitLastCreated());
}

// librptr_spawn_create_splat
// =====================
// creates the unit splat under the cursor when using mouse-click spawn
// because we cannot get the actor type from a unit, 
// we use a unit as the splat
void librptr_spawn_create_splat(string type, int player) {
	if(librptr_player[player].spawn_splat != null) {
		UnitRemove(librptr_player[player].spawn_splat);
	}
	
	UnitCreate(1, type, 0, player, librptr_player[player].mouse_position, 270.0);
	librptr_player[player].spawn_splat = UnitLastCreated();
	
	// set visuals
    UnitSetState(librptr_player[player].spawn_splat, c_unitStateInvulnerable, true);
    UnitSetState(librptr_player[player].spawn_splat, c_unitStatePaused, true);
    UnitSetState(librptr_player[player].spawn_splat, c_unitStateSelectable, false);
    UnitSetState(librptr_player[player].spawn_splat, c_unitStateTargetable, false);
    UnitSetState(librptr_player[player].spawn_splat, c_unitStateMoveSuppressed, true);
    UnitSetState(librptr_player[player].spawn_splat, c_unitStateRadarable, false);
	ActorSend(libNtve_gf_MainActorofUnit(librptr_player[player].spawn_splat), "SetOpacity .5");
	UnitBehaviorAdd(librptr_player[player].spawn_splat, LIBRPTR_BEHAVIOR_SUPPRESS_COLLISION, librptr_player[player].spawn_splat, 1);
}

// librptr_unit_set_name
// ===================
// Sets a unit's custom name into the global data table with format
// [unit_id]_NAME : [name]
void librptr_unit_set_name(string name, unit u) {
	string key = FixedToString(UnitGetCustomValue(u, LIBRPTR_UNIT_INDEX_ID), 0) + LIBRPTR_UNIT_NAME_DATA_TABLE_IDENTIFIER;
	DataTableSetString(true, key, name);
}

// librptr_unit_set_name_color
// ===================
// Sets a unit's name color into global data table
// [unit_id]_NAME_COLOR : [name]
void librptr_unit_set_name_color(color col, unit u) {
	string key = FixedToString(UnitGetCustomValue(u, LIBRPTR_UNIT_INDEX_ID), 0) + LIBRPTR_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER;
	DataTableSetColor(true, key, col);
}

// librptr_unit_get_name
// ==================
// Gets a unit's custom name from the data table
// if no custom name, default to catalog name
text librptr_unit_get_name(unit u) {
	text name = StringToText("");
	string unit_id = FixedToString(UnitGetCustomValue(u, LIBRPTR_UNIT_INDEX_ID), 0);
	
	// check if unit has custom name in data table
	if( DataTableValueExists(true, unit_id + LIBRPTR_UNIT_NAME_DATA_TABLE_IDENTIFIER) ) {
		name = StringToText( DataTableGetString(true, unit_id + LIBRPTR_UNIT_NAME_DATA_TABLE_IDENTIFIER) );
	}
	else { //get default catalog name
		name = StringExternal(  CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(u), "Name", UnitGetOwner(u)) );
	}
	
	// check if unit name has a custom color in data table
	if( DataTableValueExists(true, unit_id + LIBRPTR_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER) ) {
		name = TextWithColor(name, DataTableGetColor(true, unit_id + LIBRPTR_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER));
	}
	
	return name;
}
