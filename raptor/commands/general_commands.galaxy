//=========================================================
//		Raptor Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// librptr_command_info
// ====================
// just prints out a line of text to everyone
bool librptr_command_info(bool testConds, bool runActions) {
	librptr_print_output("Raptor Engine v" + IntToString(LIBRPTR_BUILD_VERSION) + "." + IntToString(LIBRPTR_BUILD_SUB_VERSION) + LIBRPTR_BUILD_VERSION_MODIFIER, EventPlayer());
	return true;
}

// librptr_command_list_commands
// ===============
// prints out a list of all the commands registered
bool librptr_command_list_commands(bool testConds, bool runActions) {
	librptr_print_output("LISTING GAME COMMANDS:\n" + librptr_settings.commands, EventPlayer());
	return true;
}

// librptr_command_players
// ===============
// prints player info (name + color + permissions level)
bool librptr_command_players(bool testConds, bool runActions) {
	int player = 0;
	text player_info;
	text output = StringToText("> Listing players: ");
	
	while( player < LIBRPTR_MAX_PLAYERS ) {
		if( PlayerStatus(player) != c_playerStatusUnused ) {
			if( PlayerStatus(player) == c_playerStatusActive || PlayerType(player) != c_playerTypeUser ) {
				player_info = librptr_player_name_colored(player) + StringToText(" (") + PlayerColorName(PlayerGetColorIndex(player, false)) + StringToText(")");
			} else { // player left: print info in grey
				player_info = TextWithColor( PlayerName(player) + StringToText(" (") + PlayerColorName(PlayerGetColorIndex(player, false)) + StringToText(") (Left)"), Color(35,35,35) );
			}
			
			// display mod or admin status
			if( librptr_player[player].permission_level == LIBRPTR_PERMISSIONS_LEVEL_MOD ) {
				player_info = player_info + StringToText(" (Mod)");
			}
			else if( librptr_player[player].permission_level == LIBRPTR_PERMISSIONS_LEVEL_ADMIN ) {
				player_info = player_info + StringToText(" (Admin)");
			}
			
			output = output + StringToText("\n") + player_info;
		}
		player += 1;
	}

	librptr_print_text(output, PlayerGroupSingle(EventPlayer()));

	return true;
}

// librptr_command_gamesetup
// ====================
// redirects to proper gamesetup saving/loading/removing commands
bool librptr_command_gamesetup(bool testConds, bool runActions) {
	string param;
	string gamesetup_name;
	string rgnName;
	region rgn = RegionEntireMap();
	int i;
	string gamesetup_list = "";
	
	if(StringWord(librptr_player[EventPlayer()].chat_msg, 2) == "") {
		return true;
	}
	
	param = StringWord(librptr_player[EventPlayer()].chat_msg, 2);
	
	if(StringEqual(param, "save", c_stringNoCase)) {
		gamesetup_name = StringWord(librptr_player[EventPlayer()].chat_msg, 3);
		if(gamesetup_name == "") {
			librptr_print_error("Invalid game setup name", EventPlayer());			
			return true;
		}
		// TODO: PROPER REGIONS
		if(StringWord(librptr_player[EventPlayer()].chat_msg, 4) != "") {
			if(StringSub(StringWord(librptr_player[EventPlayer()].chat_msg, 4), 1, 1) == "#") {
				rgnName = StringWord(librptr_player[EventPlayer()].chat_msg, 4);
				rgnName = StringSub(rgnName, 2, StringLength(rgnName)); // remove the #
				
				// TODO: Get region from rgnName
				
				if(rgn == null) {
					librptr_print_error("No region with that name exists!", EventPlayer());
					return true;
				}
				librptr_print_success("Saving region " + rgnName, EventPlayer());
			}
			else {
				librptr_print_error("Region name must be prefixed with '#' (e.g. a region named \"rgn\" must be entered as #rgn", EventPlayer());
				return true;				
			}
		}
		
		librptr_gamesetup_save(EventPlayer(), gamesetup_name, rgn);
		return true;
	}
	
	if(StringEqual(param, "load", c_stringNoCase)) {
		gamesetup_name = StringWord(librptr_player[EventPlayer()].chat_msg, 3);
		
		if(BankSectionExists(librptr_player[EventPlayer()].bank_storage, LIBRPTR_BANK_GAMESETUP_PREFIX + gamesetup_name)) {
			librptr_print_text( librptr_player_name_colored(EventPlayer()) + StringToText(" is loading a gamesetup..."), PlayerGroupAll() );
			librptr_gamesetup_load(EventPlayer(), gamesetup_name);
			return true;
		}
		else {
			librptr_print_error("Game setup " + gamesetup_name + " does not exist", EventPlayer());
			return true;
		}
	}
	
	if(StringEqual(param, "remove", c_stringNoCase)) {
		gamesetup_name = StringWord(librptr_player[EventPlayer()].chat_msg, 3);
		
		if( librptr_gamesetup_remove(EventPlayer(), gamesetup_name) ) {
			librptr_print_success("Game setup \"" + gamesetup_name + "\" has been deleted", EventPlayer());
			return true;
		}
		else {
			librptr_print_error("Game setup \"" + gamesetup_name + "\" does not exist", EventPlayer());
			return true;
		}
	}
	
	if(StringEqual(param, "removeall", c_stringNoCase)) {
		i = BankSectionCount(librptr_player[EventPlayer()].bank_storage) - 1;
		
		while( i >= 0 ) {
			if( StringContains(BankSectionName(librptr_player[EventPlayer()].bank_storage, i), LIBRPTR_BANK_GAMESETUP_PREFIX, c_stringBegin, c_stringNoCase) ) {
				BankSectionRemove(librptr_player[EventPlayer()].bank_storage, BankSectionName(librptr_player[EventPlayer()].bank_storage, i));
			}
			i -= 1;
		}
		BankSave(librptr_player[EventPlayer()].bank_storage);
		librptr_print_success("All game setups have been deleted", EventPlayer());
	
		return true;
	}
	
	if(StringEqual(param, "list", c_stringNoCase)) {
		i = BankSectionCount(librptr_player[EventPlayer()].bank_storage) - 1;

		while(i >= 0) {
			if( StringContains(BankSectionName(librptr_player[EventPlayer()].bank_storage, i), LIBRPTR_BANK_GAMESETUP_PREFIX, c_stringBegin, c_stringNoCase) ) {
				gamesetup_name = BankSectionName(librptr_player[EventPlayer()].bank_storage, i);
				gamesetup_list = gamesetup_list + ", " + StringSub(gamesetup_name, 4, StringLength(gamesetup_name));
			}
			i -= 1;
		}
		
		if(gamesetup_list == "") {
			librptr_print_output("You have no saved game setups", EventPlayer());
			return true;
		}
		
		//remove the first comma
		gamesetup_list = StringSub(gamesetup_list, 3, StringLength(gamesetup_list));
		
		librptr_print_output("Listing gamesetups:\n" + gamesetup_list, EventPlayer());
		
		return true;
	}
	
	return true;
}

// librptr_command_control
// ==================
// gives a player control over another player's units (modified from Cortex Engine)
bool librptr_command_control(bool testConds, bool runActions) {
	string player = StringWord(librptr_player[EventPlayer()].chat_msg, 2);
	string target_player = StringWord(librptr_player[EventPlayer()].chat_msg, 3);
	string original = player;
	int i = 1;
	int context = EventPlayer();	// a player to be controlled/given control

	// if target player specified, trying to make two players control one another
	if( target_player != "" ) {
		context = librptr_color_to_player(player);
		player = target_player;
	}
	
	if( context == -1 ) { // Invalid player.
		return true;
	}
	
	// check permissions on context player
	else if( context != EventPlayer() && PlayerType(context) == c_playerTypeUser && librptr_player[EventPlayer()].permission_level <= librptr_player[context].permission_level ) {
		return true;
	}

	// if original player was "all", unally all / ally all by 
	// parsing command for each player
	if( original == "all" ) {
		while( i != LIBRPTR_MAX_PLAYERS ) {
			// Issue this command over the next color.
			librptr_chat_parse("\\control " + librptr_color_from_player(i) + " " + target_player, EventPlayer(), librptr_player[EventPlayer()].context);
			i += 1;
		}
		return true;
	}
	
	
	// apply alliance control/spending
	while( i != LIBRPTR_MAX_PLAYERS ) { 
		if( i == context || (librptr_color_to_player(player) != i && player != "all") ) {
			i += 1;
			continue;
		}

		if( PlayerType(i) != c_playerTypeUser ) { 
			PlayerSetAlliance( context, c_allianceIdControl, i, true );
			PlayerSetAlliance( context, c_allianceIdSpend, i, true );
			PlayerSetAlliance( i, c_allianceIdControl, context, true );
			PlayerSetAlliance( i, c_allianceIdSpend, context, true );			
		}
		else {
			PlayerSetAlliance( context, c_allianceIdControl, i, true );
			PlayerSetAlliance( context, c_allianceIdSpend, i, true );
			// Now check, do we have permission to modify this player's alliances, too?
			if( EventPlayer() == i || librptr_player[EventPlayer()].permission_level > librptr_player[context].permission_level ) {
				PlayerSetAlliance( i, c_allianceIdControl, context, true );
				PlayerSetAlliance( i, c_allianceIdSpend, context, true );	
			}
		}

		i += 1;
	}
	
	return true;
}

// librptr_command_uncontrol
// ======================
// stops unit spending/control between two players (Modified from Cortex Engine)
bool librptr_command_uncontrol(bool testConds, bool runActions) {
	string player = StringWord(librptr_player[EventPlayer()].chat_msg, 2);
	string target_player = StringWord(librptr_player[EventPlayer()].chat_msg, 3);
	string original = player;
	int i = 1;
	int context = EventPlayer();	// a player to be controlled/given control

	// if target player specified, trying to make two players control one another
	if( target_player != "" ) {
		context = librptr_color_to_player(player);
		player = target_player;
	}
	
	if( context == -1 ) { // Invalid player.
		return true;
	}
	
	// check permissions on context player
	else if( context != EventPlayer() && PlayerType(context) == c_playerTypeUser && librptr_player[EventPlayer()].permission_level <= librptr_player[context].permission_level ) {
		return true;
	}

	// if original player was "all", unally all / ally all by 
	// parsing command for each player
	if( original == "all" ) {
		while( i != LIBRPTR_MAX_PLAYERS ) {
			// Issue this command over the next color.
			librptr_chat_parse("\\control " + librptr_color_from_player(i) + " " + target_player, EventPlayer(), librptr_player[EventPlayer()].context);
			i += 1;
		}
		return true;
	}


	// apply alliance control/spending
	while( i != LIBRPTR_MAX_PLAYERS ) { 
		if( i == context || (librptr_color_to_player(player) != i && player != "all") ) {
			i += 1;
			continue;
		}

		if( PlayerType(i) != c_playerTypeUser ) { 
			PlayerSetAlliance( context, c_allianceIdControl, i, false );
			PlayerSetAlliance( context, c_allianceIdSpend, i, false );
			PlayerSetAlliance( i, c_allianceIdControl, context, false );
			PlayerSetAlliance( i, c_allianceIdSpend, context, false );			
		}
		else {
			PlayerSetAlliance( context, c_allianceIdControl, i, false );
			PlayerSetAlliance( context, c_allianceIdSpend, i, false );
			// Now check, do we have permission to modify this player's alliances, too?
			if( EventPlayer() == i || librptr_player[EventPlayer()].permission_level > librptr_player[context].permission_level ) {
				PlayerSetAlliance( i, c_allianceIdControl, context, false );
				PlayerSetAlliance( i, c_allianceIdSpend, context, false );	
			}
		}

		i += 1;
	}
	
	return true;
}

// librptr_command_remove_player
// ===================
// removes all of a specific players units from the map
bool librptr_command_remove_player(bool testConds, bool runActions) {
	int target_player = librptr_color_to_player( StringWord(librptr_player[EventPlayer()].chat_msg, 2) ); //GET PLAYER COLOR FROM STRING.
	unitgroup g;
	
	if( target_player == -1 ) {
		librptr_print_error("Invalid player", EventPlayer());
		return false;
	}
	
	// if target_player is not yourself or a non-user, do permissions check
	if ( target_player != EventPlayer() && PlayerType(target_player) == c_playerTypeUser ) {
		if( librptr_player[EventPlayer()].permission_level < LIBRPTR_PERMISSIONS_LEVEL_MOD && 
			librptr_player[EventPlayer()].permission_level <= librptr_player[target_player].permission_level ) {
			librptr_print_error("You cannot remove someone of equal or greater rank than you (while not a moderator or admin)", EventPlayer());
			return false;
		}
	}
	
	// remove all of target player's units
	g = UnitGroup( null, target_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0 );
	UnitGroupLoopBegin(g);
	while( !UnitGroupLoopDone() ) {
		UnitRemove( UnitGroupLoopCurrent() );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	librptr_print_text(librptr_player_name_colored(target_player) + StringToText(" has been removed by ") + librptr_player_name_colored(EventPlayer()), PlayerGroupAll());

	return true;
}