//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @nmosfet
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// basic game player constants
const int LIBWYV_MAX_PLAYERS = 16; // max players supported is 16 (0 - neutral, 15 - hostile)
const string LIBWYV_PLAYER_BANK_NAME = "WyvernBank";
const int LIBWYV_PLAYER_NEUTRAL = 0;
const int LIBWYV_PLAYER_HOSTILE = 15;
const int LIBWYV_UI_PANEL_NONE = -1;

// libwyv_player_struct
// =======================
// contains all player properties
struct libwyv_player_properties {

	// mouse_position
	// =================
	// Location of player mouse
	point mouse_position;		// x,y position in world
	point mouse_position_ui;	// x,y position in the game UI

	// keys + mouse flags
	// ================
	// flags for whether keys/mouse pressed up/down:
	// false - up
	// true - down
	bool key_ctrl;
	bool key_alt;
	bool key_shift;
	bool key_x;
	bool key_y;
	bool key_z;
	bool mouse_right;

	// chat_msg
	// ================
	// player chat message for parsing
	// when running a command, chat_msg is set to the command being run
	string chat_msg;

	// done_parsing
	// =================
	// flag to manually interrupt and stop the parser for the player
	// can be used by commands to stop parsing early
	bool done_parsing;

	// permission_level
	// =================
	// Permission level of a player (default - 0, mod - 1, admin - 2)
	int permission_level;

	// permission_allow
	// =================
	// String that contains single game instance of commands,
	// delineated by spaces, of commands player CAN use
	// For a single game instance, these will transfer even if admin changes
	string permissions_allow;

	// permission_block
	// =================
	// String that contains single game instance of commands,
	// delineated by spaces, of commands player CANNOT use
	// For a single game instance, these will transfer even if admin changes
	string permissions_block;

	// general permissions flags
	// ==================
	bool disabled;			// can player use any commands
	bool muted;				// can player chat (only applies to OOC)
	bool alias_blocked;		// can player use aliases system
	bool template_blocked;	// can player use template system

	// context
	// ===============
	// unitgroup target for running commands
	unitgroup context;

	// is_placing_unit
	// ===============
	// flag for using @spawn mouse-click style
	bool is_placing_unit;

	// spawn_splat
	// ==============
	// hovers under cursor for mouse-click @spawn placement
	unit spawn_splat;
	fixed spawn_splat_x;	// x scaling
	fixed spawn_splat_y;	// y scaling
	fixed spawn_splat_z;	// z scaling

	// spawn instance variables
	// ============
	// these record a player's previous usage of @spawn
	// so players can repeat @spawn without parameters
	// to repeat the last instance
	string spawn_instance_type;		// unit type
	int spawn_instance_count;		// # spawned
	int spawn_instance_player;		// player units spawned for
	region spawn_instance_location;	// location spawned

	// bank_storage
	// ===============
	// player's bank containing things that persist between games
	// (aliases, templates, setups, etc...)
	bank bank_storage;

	// aliases
	// ===============
	// alphebetized list of player's aliases as a cache to avoid
	// resorting player's alias list multiple times
	string aliases;

	// map_revealer
	// ===============
	// map revealer for entire map (revealers player specific)
	revealer map_revealer;

	// search_ variables
	// ==============
	// used to mark player's search catalog, index, and query
	// when using the "\search" command
	int search_catalog;			// current search catalog
	int search_index;			// current search index (> 0)
	string search_last_query;	// current search term

	// waygate_dialog
	// ============
	// dialog and button for using region waygates (teleport)
	int waygate_dialog;
	int waygate_dialog_control_btn;

	// active_ui_panel
	// ============
	// for use with ui module: the current active ui panel dialog, where
	// one panel is allowed to be active at a time.
	// The value here is in terms of the ARRAY list of panels, NOT the
	// dialog integer value itself.
	int active_ui_panel;
};

// libwyv_player[LIBWYV_MAX_PLAYERS]
// ====================================
// global array for players with index corresponding to player index
libwyv_player_properties[LIBWYV_MAX_PLAYERS] libwyv_player;


// libwyv_sort_aliases (prototype)
// =======================
// Prototype for sorting player aliases. Actual function definition
// provided by chat/aliases.galaxy.
string libwyv_sort_aliases(int player);

// libwyv_initialize_player
// ==============================
// initialize players (default settings)
void libwyv_player_initialize(int player) {
	libwyv_player[player].bank_storage = BankLoad( LIBWYV_PLAYER_BANK_NAME, player );
	libwyv_player[player].map_revealer = VisRevealerCreate(player, RegionEntireMap());
	libwyv_player[player].mouse_position = RegionGetCenter( RegionEntireMap() );
	libwyv_player[player].mouse_position_ui = Point(0, 0);
	libwyv_player[player].permission_level = 0;

	libwyv_player[player].spawn_splat = null;

	libwyv_player[player].waygate_dialog = 0;

	libwyv_player[player].active_ui_panel = LIBWYV_UI_PANEL_NONE;

	// create alphabetized alias list
	libwyv_player[player].aliases = libwyv_sort_aliases(player);

	CameraPan( player, RegionGetCenter(RegionEntireMap()), 0.0, 10.0, 10.0, false );
}

// libwyv_player_name_colored
// ===========================
// returns a text string of player name with color
text libwyv_player_name_colored(int player) {
	return TextWithColor( StringToText("<d Player=\"" + IntToString(player) + "\" GameValue=\"PlayerClanTag\"/> ") + PlayerName(player), ColorFromIndex( PlayerGetColorIndex(player, false), c_teamColorDiffuse) );
}

// libwyv_color_to_player_default
// ==========================
// Returns the default player index for a color string
int libwyv_color_to_player_default(string colour) {
	if( colour == "white" ) {
		return 0;
	} else if( colour == "red" ) {
		return 1;
	} else if( colour == "blue") {
		return 2;
	} else if( colour == "teal" ) {
		return 3;
	} else if( colour == "purple" ) {
		return 4;
	} else if( colour == "yellow" ) {
		return 5;
	} else if( colour == "orange" ) {
		return 6;
	} else if( colour == "green" ) {
		return 7;
	} else if( colour == "lightpink" ) {
		return 8;
	} else if( colour == "violet" ) {
		return 9;
	} else if( colour == "lightgrey" ) {
		return 10;
	} else if( colour == "lightgray" ) {
		return 10;
	} else if( colour == "darkgreen" ) {
		return 11;
	} else if( colour == "brown" ) {
		return 12;
	} else if( colour == "lightgreen" ) {
		return 13;
	} else if( colour == "darkgrey" ) {
		return 14;
	} else if( colour == "darkgray" ) {
		return 14;
	} else if( colour == "pink" ) {
		return 15;
	}

	return -1;
}

// libwyv_color_to_player
// ===================
// Converts a color from a string to a player's index
// (since Blizzard has no function to get color of a player as a string)
int libwyv_color_to_player(string colour) {
	int player = LIBWYV_MAX_PLAYERS - 1;

	// special color keywords
	if( colour == "hostile" ) {
		return LIBWYV_PLAYER_HOSTILE;
	} else if( colour == "neutral" ) {
		return LIBWYV_PLAYER_NEUTRAL;
	} else if( colour == "me" ) {
		return EventPlayer();
	}

	while( player >= 0) {
		if( PlayerGetColorIndex( player, false ) == libwyv_color_to_player_default(colour) && PlayerStatus(player) != c_playerStatusUnused) {
			return player;
		}
		player -= 1;
	}

	return -1;
}

// libwyv_color_from_player_default
// =======================
// returns the default color for a player index (ported from Cortex)
// (assumes mapmakers don't mess with default player color index)
string libwyv_color_from_player_default(int plr) {
	if( plr == 0 ) {
		return "white";
	} else if( plr == 1 ) {
		return "red";
	} else if( plr == 2 ) {
		return "blue";
	} else if( plr == 3 ) {
		return "teal";
	} else if( plr == 4 ) {
		return "purple";
	} else if( plr == 5 ) {
		return "yellow";
	} else if( plr == 6 ) {
		return "orange";
	} else if( plr == 7 ) {
		return "green";
	} else if( plr == 8 ) {
		return "lightpink";
	} else if( plr == 9 ) {
		return "violet";
	} else if( plr == 10 ) {
		return "lightgrey";
	} else if( plr == 11 ) {
		return "darkgreen";
	} else if( plr == 12 ) {
		return "brown";
	} else if( plr == 13 ) {
		return "lightgreen";
	} else if( plr == 14 ) {
		return "darkgrey";
	} else if( plr == 15 ) {
		return "pink";
	}

	return "";
}

// libwyv_color_from_player
// ======================
// Returns the string name of the color a player currently is (Ported from Cortex)
// (since Blizzard PlayerColorName returns as text, which
// cant be used for comparisons or anything useful)
string libwyv_color_from_player(int plr) {
	return libwyv_color_from_player_default(PlayerGetColorIndex(plr, false));
}
