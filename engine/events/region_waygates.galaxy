//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// libwyv_region_entered
// ===================
// if region entered has linked regions, set unit
// custom value to ID of linked region (for teleporting)
// created on demand when waygates are created via
// #teleport (see region_commands.galaxy)
// (Modified from Cortex)
bool libwyv_region_entered(bool testConds, bool runActions) {
	int waygate_id = 1;
	region r;
	string rgn_name;
	unitgroup units_in_rgn;
	int nalive;

	// get the region from data table
	while( waygate_id < libwyv_region_waygate_counter ) {
		rgn_name = DataTableGetString(true, LIBWYV_WAYGATE_DATA_TABLE_IDENTIFIER + " " + IntToString(waygate_id));
		r = DataTableGetRegion(true, rgn_name);
		if( r == EventUnitRegion() ) {
			break;
		}

		waygate_id += 1;

		// reached max waygate counters: not in a waygate
		if( waygate_id == libwyv_region_waygate_counter ) {
			return false;
		}
	}

	// check if entering or leaving region
	if( libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) ) { // unit entered region
		//libwyv_print_output("Region entered", UnitGetOwner(EventUnit()) );

		// get linked region
		waygate_id = DataTableGetInt(true, LIBWYV_REGION_LINK_DATA_TABLE_IDENTIFIER + " " + rgn_name );
		UnitSetCustomValue(EventUnit(), LIBWYV_UNIT_INDEX_WAYGATE, IntToFixed(waygate_id));
		//libwyv_print_output(FixedToString(UnitGetCustomValue(EventUnit(), LIBWYV_UNIT_INDEX_WAYGATE), 1), UnitGetOwner(EventUnit()) );

		// turn on dialog "enter" button for region
		DialogSetVisible(DataTableGetDialog(true, LIBWYV_WAYGATE_DIALOG_DATA_TABLE_IDENTIFIER + " " + rgn_name), PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
	} else { // leaving this region.
		UnitSetCustomValue(EventUnit(), LIBWYV_UNIT_INDEX_WAYGATE, 0);

		//units_in_rgn = UnitGroup(null, EventPlayer(), r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
		//nalive = UnitGroupCount(units_in_rgn, c_unitCountAlive);
		//if( nalive > 0 ) {
		//	DialogSetVisible(DataTableGetDialog(true, LIBWYV_WAYGATE_DIALOG_DATA_TABLE_IDENTIFIER + " " + rgn_name), PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
		//}
	}
	return true;
}

// libwyv_waygate_dialog_manager
// ===================
// called periodically (set in events.galaxy) to
// create/destroy the player waygate button
bool libwyv_waygate_dialog_manager(bool testConds, bool runActions) {
	unitgroup g;
	int nalive; // number of units in g
	int index;
	unit u;
	int waygate_id;
	int player = 1;
	string rgn_name;
	region r;
	unitgroup units_in_rgn;

	// loop over all waygates and their regions
	waygate_id = 1;
	while( waygate_id < libwyv_region_waygate_counter ) {
		// get waygate region (if it exists)
		if( !DataTableValueExists(true, LIBWYV_WAYGATE_DATA_TABLE_IDENTIFIER + " " + IntToString(waygate_id)) ) {
			waygate_id += 1;
			continue;
		}

		rgn_name = DataTableGetString(true, LIBWYV_WAYGATE_DATA_TABLE_IDENTIFIER + " " + IntToString(waygate_id));
		r = DataTableGetRegion(true, rgn_name);

		// check if players have non-structure units alive inside the region
		player = 1;
		while( player < LIBWYV_MAX_PLAYERS ) {
			if( PlayerType(player) != c_playerTypeUser || PlayerStatus(player) != c_playerStatusActive ) {
				player += 1;
				continue;
			}

			// get # of units alive in region for given player. if 0, turn off the
			// waygate dialog for the player.
			units_in_rgn = UnitGroup(null, player, r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
			if( UnitGroupCount(units_in_rgn, c_unitCountAlive) == 0 ) {
				DialogSetVisible(DataTableGetDialog(true, LIBWYV_WAYGATE_DIALOG_DATA_TABLE_IDENTIFIER + " " + rgn_name), PlayerGroupSingle(player), false);
			}

			player += 1;
		}


		// if yes, continue
		// else
		waygate_id += 1;
	}

	return true;
}

// libwyv_waygate_dialog_clicked
// ===========================
// runs whenever a dialog control is clicked
// if the control is the waygate dialog, warp
// any selected units between waygate regions
bool libwyv_waygate_dialog_clicked_old(bool testConds, bool runActions) {
	unitgroup g;
	int nalive;	// number of units alive in g
	int index = 1;
	int waygate_id;
	unit u;
	region r;
	string s;

	// Waygate teleport system
	if( EventDialogControl() == libwyv_player[EventPlayer()].waygate_dialog_control_btn ) {
		g = UnitGroupSelected(EventPlayer());
		g = libwyv_enforce_unit_permissions(g, EventPlayer());
		nalive = UnitGroupCount(g, c_unitCountAlive);

		if( nalive > 0 ) {
			while( index <= nalive ) {
				u = UnitGroupUnit(g, index);
				if( UnitTypeTestAttribute(UnitGetType(u), c_unitAttributeStructure) ) {
					index += 1;
					continue;
				}

				waygate_id = FixedToInt(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_WAYGATE));

				if( waygate_id != 0 ) { // Lookup this region by waygate id
					s = DataTableGetString(true, LIBWYV_WAYGATE_DATA_TABLE_IDENTIFIER + " " + IntToString(waygate_id));
					if( s != "" ) {
						r = DataTableGetRegion(true, s);
						if( r != null ) { // move units to linked region
							UnitSetPosition( u, RegionGetCenter( r ),false );
						}
					}
				}

				index += 1;
			}
		}
	}

	return true;
}

// libwyv_waygate_dialog_clicked
// ===========================
// runs whenever a dialog control is clicked
// if the control is the waygate dialog, warp
// any selected units between waygate regions
bool libwyv_waygate_dialog_clicked(bool testConds, bool runActions) {
	unitgroup g;
	int nalive;	// number of units alive in g
	int index = 1;
	int waygate_id;
	unit u;
	region r;
	string s;

	// Waygate teleport system
	if( DataTableValueExists(true, LIBWYV_WAYGATE_DIALOG_REG_DATA_TABLE_IDENTIFIER + " " + IntToString(DialogControlGetDialog(EventDialogControl()) ) ) ) {
		g = UnitGroupSelected(EventPlayer());
		g = libwyv_enforce_unit_permissions(g, EventPlayer());
		nalive = UnitGroupCount(g, c_unitCountAlive);

		if( nalive > 0 ) {
			while( index <= nalive ) {
				u = UnitGroupUnit(g, index);
				if( UnitTypeTestAttribute(UnitGetType(u), c_unitAttributeStructure) ) {
					index += 1;
					continue;
				}

				waygate_id = FixedToInt(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_WAYGATE));

				if( waygate_id != 0 ) { // Lookup this region by waygate id
					s = DataTableGetString(true, LIBWYV_WAYGATE_DATA_TABLE_IDENTIFIER + " " + IntToString(waygate_id));
					if( s != "" ) {
						r = DataTableGetRegion(true, s);
						if( r != null ) { // move units to linked region
							UnitSetPosition( u, RegionGetCenter( r ), false );
							//libwyv_print_output("Leaving: " + FixedToString(UnitGetCustomValue(EventUnit(), LIBWYV_UNIT_INDEX_WAYGATE), 1), UnitGetOwner(u) );

						}
					}
				}

				index += 1;
			}
		}
	}

	return true;
}
