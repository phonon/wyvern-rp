//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @nmosfet
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const string LIBWYV_BANK_SECTION_MACRO = "macros";
const string LIBWYV_MACRO_TOKEN_IDENTIFIER = "%";

// libwyv_macro_command_redirect
// ===================
// gets "macro ..." command from parser, redirects to function
bool libwyv_macro_command_redirect(string command, int player) {
	string subcommand = StringWord(command, 2);
	string macro = "";
	string content = "";

	// format for creating macros is:
	// "macro create foo %a %b = @cmd1 %a; @cmd2 %b"
	// -> string between "macro create" and "=" is the macro
	// -> first word of macro becomes bank key
	// -> bank value stored is: "%a %b = @cmd1 %a; @cmd2 %b"
	if( StringEqual(subcommand, "create", c_stringNoCase) ) {
		if( !StringContains(libwyv_player[player].chat_msg, "=", c_stringAnywhere, c_stringNoCase) ) {
			libwyv_print_error(player, "IMPROPER MACRO: NO ASSIGNMENT");
			return true;
		}

		macro = StringWord(libwyv_player[player].chat_msg, 3);
		// verify macro name is proper:
		// if(StringSub(macro, 1, 1) == LIBWYV_MACRO_TOKEN_IDENTIFIER) {
			// libwyv_print_error("MACRO NAME CANNOT BE A TOKEN", player);
			// return true;
		// }
		if( StringContains(macro, "=", c_stringAnywhere, c_stringNoCase) ) {
			libwyv_print_error(player, "MACRO NAME CANNOT HAVE AN \'=\' SYMBOL");
			return true;
		}

		// content: remove "macro" and "create" and the macro command from chat msg string
		content = StringReplaceWord(libwyv_player[player].chat_msg, "macro", "", 1, c_stringNoCase);
		content = StringReplaceWord(content, "create", "", 1, c_stringNoCase);
		content = libwyv_string_trim( StringSub(content, StringFind(content, macro, c_stringNoCase) + StringLength(macro) + 1, StringLength(content)) );

		if( content != "" ) {
			libwyv_bank_create(LIBWYV_BANK_SECTION_MACRO, StringWord(macro, 1), content, player);
			libwyv_print_success(player, "MACRO CREATED: " + macro + " " + StringSub(content, 1, StringFind(content, "=", c_stringNoCase) - 1) + "\n"
								  + "[\'" + libwyv_string_trim( StringSub(content, StringFind(content, "=", c_stringNoCase) + 1, StringLength(content)) ) + "\']");
		}
		else {
			libwyv_print_error(player, "MACRO CANNOT BE EMPTY");
		}

		return true;
	}
	else if( StringEqual(subcommand, "remove", c_stringNoCase) ) {
		macro = StringWord(command, 3);
		if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_MACRO, macro) ) {
			libwyv_bank_remove(LIBWYV_BANK_SECTION_MACRO, macro, player);
			libwyv_print_success(player, "MACRO REMOVED: " + macro);
		}
		else {
			libwyv_print_error(player, "MACRO " + macro + " DOES NOT EXIST");
		}
	}
	else if( StringEqual(subcommand, "removeall", c_stringNoCase) ) {
		libwyv_bank_section_remove_all(LIBWYV_BANK_SECTION_MACRO, player);
		libwyv_print_success(player, "ALL MACROS REMOVED");
	}
	else if( StringEqual(subcommand, "list", c_stringNoCase) ) {
		libwyv_bank_section_dump(LIBWYV_BANK_SECTION_MACRO, player);
	}
	else if( StringEqual(subcommand, "print", c_stringNoCase) ) {
		libwyv_bank_key_content_dump(LIBWYV_BANK_SECTION_MACRO, StringWord(command, 3), player);
	}
	else if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_MACRO, subcommand) ) {
		libwyv_bank_key_content_dump(LIBWYV_BANK_SECTION_MACRO, subcommand, player);
	}
	else {
		libwyv_print_error(player, "INVALID MACRO COMMAND");
	}

	return false;
}

// libwyv_macro
// =================
// gets the content of macro from bank and replaces tokens with
// values from player's chat command
string libwyv_macro(string macro, int player) {
	string evaluated = BankValueGetAsString( libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_MACRO, StringWord(macro, 1) ) ;
	string token_identifiers = StringSub(evaluated, 1, StringFind(evaluated, "=", c_stringNoCase) - 1);
	int i = 1;

	evaluated = libwyv_string_trim( StringSub( evaluated, StringFind(evaluated, "=", c_stringNoCase) + 1, StringLength(evaluated) ) );

	// must use index i+1 for macro because that string includes the macro command itself
	while( StringWord(token_identifiers, i) != "" && StringWord(macro, i + 1) != "" ) {
		evaluated = StringReplaceWord(evaluated, StringWord(token_identifiers, i), StringWord(macro, i + 1), c_stringReplaceAll, c_stringNoCase);
		i += 1;
	}

	return evaluated;
}
