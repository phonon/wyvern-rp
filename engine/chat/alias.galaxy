//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @nmosfet
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const int LIBWYV_ALIAS_MAX_DEPTH = 10;	// max depth of recursive alias replacing (prevent infinite aliasing)
const string LIBWYV_BANK_SECTION_ALIAS = "aliases";

// libwyv_alias_insert_in_list
// =====================
// Inserts an alias string into the (player) alias list, list given by:
//  " alias(1) alias(2) alias(3) ... alias(n) "
// Each alias separated by a space. Note the spaces at each end of the string.
// Alias is inserted in order by searching through list until find
// the index k where: alias_inserted < alias(k).
// Otherwise, if not less than any, alias appended to the end.
static string libwyv_alias_insert_in_list(string list, string alias) {
	string curr = StringWord(list, 1);
	int i = 1;
	int index = 1; // index in string

	while( curr != "" ) {
		// insert before (if the string value less than curr) by replacing
		// space separating strings in the alias list with the inserted alias
		if( StringCompare(alias, curr, c_stringNoCase) <= 0 ) {
			return StringReplace(list, " " + alias + " ", index, index);
		}
		index = index + StringLength(curr) + 1; // +1 to account for space
		i += 1;
		curr = StringWord(list, i);
	}
	// else, append to end
	return StringReplace(list, " " + alias + " ", index, index);
}

// libwyv_alias_command_redirect
// ===================
// gets "alias ..." command from parser, redirects to function
bool libwyv_alias_command_redirect(string command, int player) {
	string subcommand = StringWord(command, 2);
	string alias = "";
	string content = "";

	if( StringEqual(subcommand, "create", c_stringNoCase) ) {
		alias = StringWord(command, 3);

		// first check if alias already exists
		if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS, alias) ) {
			libwyv_print_error(player, "ALIAS ALREADY EXISTS");
			return true;
		}

		// remove "alias" and "create" and the alias from chat msg
		content = StringReplaceWord(libwyv_player[player].chat_msg, "alias", "", 1, c_stringNoCase);
		content = StringReplaceWord(content, "create", "", 1, c_stringNoCase);
		content = libwyv_string_trim( StringSub(content, StringFind(content, alias, c_stringNoCase) + StringLength(alias) + 1, StringLength(content)) );

		if( content != "" ) {
			libwyv_bank_create(LIBWYV_BANK_SECTION_ALIAS, alias, content, player);
			libwyv_player[player].aliases = libwyv_alias_insert_in_list(libwyv_player[player].aliases, alias);
			libwyv_print_success(player, "ALIAS CREATED: " + alias + "\n" + "[\'" + content + "\']");
		}
		else {
			libwyv_print_error(player, "ALIAS CANNOT BE EMPTY");
		}

		return true;
	}
	else if( StringEqual(subcommand, "remove", c_stringNoCase) ) {
		alias = StringWord(command, 3);
		if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS, alias) ) {
			libwyv_bank_remove(LIBWYV_BANK_SECTION_ALIAS, alias, player);
			libwyv_player[player].aliases = StringReplaceWord(libwyv_player[player].aliases, " " + alias + " ", " ", 1, c_stringCase);
			libwyv_print_success(player, "ALIAS REMOVED: " + alias);
		}
		else {
			libwyv_print_error(player, "ALIAS " + alias + " DOES NOT EXIST");
		}
	}
	else if( StringEqual(subcommand, "removeall", c_stringNoCase) ) {
		libwyv_bank_section_remove_all(LIBWYV_BANK_SECTION_ALIAS, player);
		libwyv_player[player].aliases = "";
		libwyv_print_success(player, "ALL ALIASES REMOVED");
	}
	else if( StringEqual(subcommand, "list", c_stringNoCase) ) {
		//libwyv_player[player].aliases = libwyv_sort_aliases(player);
		alias = libwyv_string_trim(libwyv_player[player].aliases);
		alias = StringReplaceWord(alias, " ", ", ", c_stringReplaceAll, c_stringNoCase);
		libwyv_print_output(player, "ALIASES: ");
		libwyv_print(PlayerGroupSingle(player), alias);
	}
	else if( StringEqual(subcommand, "print", c_stringNoCase) ) {
		libwyv_bank_key_content_dump(LIBWYV_BANK_SECTION_ALIAS, StringWord(command, 3), player);
	}
	else if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS, subcommand) ) {
		libwyv_bank_key_content_dump(LIBWYV_BANK_SECTION_ALIAS, subcommand, player);
	}
	else {
		libwyv_print_error(player, "INVALID ALIAS COMMAND");
	}

	return false;
}

// libwyv_alias_sub
// ===================
// recursively find and replace aliases in a given string
string libwyv_alias_sub(string msg, int player, int recursion_depth) {
	string alias = StringWord(msg, 1);
	string subbed = "";
	int i = 1;

	if( recursion_depth > LIBWYV_ALIAS_MAX_DEPTH ) {
		return msg;
	}

	while( alias != "" ) {
		if( BankKeyExists( libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS, alias ) ) {
			subbed = subbed + " " + libwyv_alias_sub(BankValueGetAsString(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS, alias), player, recursion_depth + 1);
		}
		else {
			subbed = subbed + " " + alias;
		}

		i += 1;
		alias = StringWord(msg, i);
	}

	// remove extra front end " " for return
	return StringSub(subbed, 2, StringLength(subbed));
}

// libwyv_strcmp
// =============
// String comparison function for use with qsort
static int libwyv_strcmp(string k1, string k2) {
	return StringCompare(DataTableGetString(true, k1), DataTableGetString(true, k2), c_stringCase);
}

// libwyv_sort_aliases
// ==================
// Creates an alphabetized list of a player's alias strings where
// each alias is separated by a space (e.g. "alias1 alias2 alias3 ...")
string libwyv_sort_aliases(int player) {
	string var = LIBWYV_BANK_SECTION_ALIAS + "_" + IntToString(player);
	int count = BankKeyCount(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS);
	int i;
	string sorted = " ";

	// gather aliases and set into a data table "array"
	for( i = 0; i < count; i += 1 ) {
		DataTableSetString(true, var + " " + IntToString(i), BankKeyName(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_ALIAS, i));
		//libwyv_print_success(player, IntToString(i) + ":" + alias);
	}

	// sort alias "array" in data table
	libx_qsort(var + " 0", count, c_dataTypeString, libwyv_strcmp);

	// recollect sorted aliases and set into player's alias string
	for( i = 0; i < count; i += 1 ) {
		sorted = sorted + DataTableGetString(true, var + " " + IntToString(i)) + " ";
		DataTableValueRemove(true, var + " " + IntToString(i)); // free data table
	}

	return sorted;
}
