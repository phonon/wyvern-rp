//=========================================================
//		Exile Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// LIBXIL_PERMISSIONS_LEVEL_
// ======================
// Constants for permissions level of certain actions
// Default player permissions level is 0
const int LIBXIL_PERMISSIONS_LEVEL_DEFAULT = 0;
const int LIBXIL_PERMISSIONS_LEVEL_MOD = 1;
const int LIBXIL_PERMISSIONS_LEVEL_ADMIN = 2;

// LIBXIL_SUPERADMIN
// ======================
// Contains player handles for those who have \debug access
// delineated by space
// (please don't remove my handle >:( -Xethyr)
const string LIBXIL_SUPERADMIN = "1-S2-1-698512 1-S2-1-938669";


// libxil_enforce_unit_permissions
// ====================
// applies permissions on a unitgroup:
// -> player can only apply commands on units whose 
//    owner is of lesser permissions level
unitgroup libxil_enforce_unit_permissions(unitgroup g, int player) {
	unit u;
	int count = UnitGroupCount(g, c_unitCountAlive);
	
	while(count) {
        u = UnitGroupUnit(g, count);
		if( UnitGetOwner(u) != player && 
			PlayerType(UnitGetOwner(u)) != c_playerTypeNone &&
			PlayerType(UnitGetOwner(u)) != c_playerTypeComputer &&
			PlayerType(UnitGetOwner(u)) != c_playerTypeHostile &&
			PlayerType(UnitGetOwner(u)) != c_playerTypeNeutral &&
			libxil_player[player].permission_level <= libxil_player[UnitGetOwner(u)].permission_level
		) {
			UnitGroupRemove(g, u);
		}	
		count -= 1;
	}
	
	return g;
}
