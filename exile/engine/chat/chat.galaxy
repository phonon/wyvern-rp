//=========================================================
//		Exile Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

include "exile/engine/chat/alias.galaxy"
include "exile/engine/chat/templates.galaxy"
include "exile/engine/chat/variables.galaxy"
include "exile/engine/chat/parser.galaxy"

// prototypes
bool libxil_process_chat_event(bool testConds, bool runActions);

// initializes the chat engine for a player
void libxil_chat_initialize_player(int player) {
	TriggerAddEventChatMessage( TriggerCreate("libxil_process_chat_event") , player, "", false );
}

// libxil_process_chat_event
// ============================
// redirects processing as needed:
// IF message begins with "<<" , directly output the message
// ELSE, parse message
bool libxil_process_chat_event(bool testConds, bool runActions) {
	unitgroup target = null;
	libxil_player[EventPlayer()].chat_msg = libxil_string_trim(EventChatMessage(false));
	
	// "<< " directly dumps message to OOC (if player not muted)
	if ( StringWord( libxil_player[EventPlayer()].chat_msg, 1) == "<<" &&  !libxil_player[EventPlayer()].muted ) {
		libxil_player[EventPlayer()].chat_msg = libxil_string_trim( StringSub(libxil_player[EventPlayer()].chat_msg, 3, StringLength(libxil_player[EventPlayer()].chat_msg)) );
		libxil_chat_print_OOC( libxil_player[EventPlayer()].chat_msg , EventPlayer());
	}
	else if( !libxil_player[EventPlayer()].disabled ) {
		// if player is not mouse-click spawning, set context to selected units
		if( !libxil_player[EventPlayer()].is_placing_unit ) {
			target = UnitGroupSelected(EventPlayer());
			target = libxil_enforce_unit_permissions(target, EventPlayer());
		}
		libxil_chat_parse(libxil_player[EventPlayer()].chat_msg, EventPlayer(), target);
	}
	else if( !libxil_player[EventPlayer()].muted ){
		libxil_chat_print_OOC( libxil_player[EventPlayer()].chat_msg , EventPlayer());
	}
	
	// TODO: chat message logging 

	return false;
}
