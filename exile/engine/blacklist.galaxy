//=========================================================
//		Exile Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// BLACKLIST

// Blacklists save a player's handle and their text name
// in a player's bank. When blacklist is run, if any player
// ingame matches a handle in the admin's list, that player
// will be disabled.

// Bank architecture as follows:
// Key: (string) "[HANDLE]" | Value: (text) PlayerName
// e.g. "1-S2-1-841872" : "SomeGuy"

const string LIBXIL_BANK_SECTION_BLACKLIST = "blacklist";

// libxil_blacklist_add
// =================
// handles adding a blacklisted player to player bank
// stored value is the text of the player's name
void libxil_blacklist_add(int player, string blacklisted_handle, text blacklisted_name) {
	BankValueSetFromText( libxil_player[player].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST, blacklisted_handle, blacklisted_name);
	BankSave( libxil_player[player].bank_storage );
}

// libxil_blacklist_remove
// ==================
// bank functions, removes a blacklisted handle
// from the player's bank.
void libxil_blacklist_remove(int player, string blacklisted_handle) {
	BankKeyRemove( libxil_player[player].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST, blacklisted_handle );
	BankSave( libxil_player[player].bank_storage );
}

// libxil_blacklist_list
// ===============
// displays list of a player's blacklist in format
// [ID] [handle] [player-name (text)]
// where the ID is simply the bank section index of the entry
void libxil_blacklist_list (int player) {
	int index = 0;
	string blist_handle;
	text list = StringToText("Blacklisted Players:");
	
	while( index < BankKeyCount(libxil_player[player].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST) ) {
		blist_handle = BankKeyName(libxil_player[player].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST, index);
		list = list + StringToText( "\n[ID: " + IntToString(index + 1) + "] " + blist_handle + " : " )
					+ BankValueGetAsText(libxil_player[player].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST, blist_handle);
		
		index += 1;
	}
	
	libxil_print_text(list, PlayerGroupSingle(player));
}

// libxil_blacklist_update
// ==================
// updates the blacklist of a specific player by checking a lobby
// for players with matching handles. if a handle in the lobby
// is on the player's blacklist, re-adds this handle with the 
// name of the handle's player (to deal with possible player name changes)
void libxil_blacklist_update(int player) {
	int p; 	// other players ingame
	int count;
	int updates = 0;

	while( p < LIBXIL_MAX_PLAYERS ) {
		if( PlayerStatus(p) == c_playerStatusActive && BankKeyExists(libxil_player[player].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST, PlayerHandle(p)) ) {
			libxil_blacklist_remove(player, PlayerHandle(p));
			libxil_blacklist_add(player, PlayerHandle(p), StringToText("<d Player=\"" + IntToString(player) + "\" GameValue=\"PlayerClanTag\"/> ") + PlayerName(p));
			updates += 1;
		}
		p += 1;
	}
	
	if (updates != 0) {
		libxil_print_output("Updated " + IntToString(updates) + " blacklist entries", EventPlayer());
	}
}

// libxil_blacklist_run
// =================
// runs the admin's blacklist (assumed running at initialization)
// -> any players in game with handles on admins blacklist are disabled
void libxil_blacklist_run(int admin) {
	int player = 1;
	
	if( BankKeyCount(libxil_player[admin].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST) == 0 ) {
		return;
	}
	
	while( player < LIBXIL_MAX_PLAYERS ) {
		if( PlayerStatus(player) == c_playerStatusActive && BankKeyExists(libxil_player[admin].bank_storage, LIBXIL_BANK_SECTION_BLACKLIST, PlayerHandle(player)) ) {
			libxil_player[player].disabled = true;
			libxil_print_text( libxil_player_name_colored(player) + StringToText(" has been blacklisted and disabled by host ") + libxil_player_name_colored(admin), PlayerGroupAll() );	
		}
		player += 1;
	}
}
