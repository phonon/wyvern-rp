//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// libwyv_command_narrate
// ====================
// just prints out a line of text to everyone
bool libwyv_command_narrate(bool testConds, bool runActions) {
	string msg = libwyv_player[EventPlayer()].chat_msg;
	msg = StringSub( msg, StringFind(msg, " ", c_stringCase) + 1, StringLength(msg) ); // remainder of chat message
	
	libwyv_print( libwyv_string_trim(msg), PlayerGroupAll() );
	return true;
}

// libwyv_command_say
// ==================
// prints [unit name]: msg to chat
// (actor talk icon and sound are defined in data.galaxy)
bool libwyv_command_say(bool testConds, bool runActions) {
	text unit_msg;
	string cmd_msg = libwyv_player[EventPlayer()].chat_msg;
	cmd_msg = StringSub( cmd_msg, StringFind(cmd_msg, " ", c_stringCase) + 1, StringLength(cmd_msg) ); // remainder of chat message
	
	unit_msg = StringToText(": " + libwyv_string_trim(cmd_msg));
	
	UnitGroupLoopBegin(libwyv_player[EventPlayer()].context);
	while(!UnitGroupLoopDone()) {
		// @say unit visuals (flash circle, make a talk icon appear overhead)
		UnitFlashSelection(UnitGroupLoopCurrent(), 2.0);
		ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "AttachModel " + LIBWYV_TALK_ICON_ACTOR + "{} Overhead");
		
		libwyv_print_text( libwyv_unit_get_name( UnitGroupLoopCurrent() ) + unit_msg, PlayerGroupAll() );
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	return true;
}

// libwyv_command_setname
// ==================
// gives a unit a custom name by storing in data table
bool libwyv_command_setname(bool testConds, bool runActions) {
	string name = libwyv_player[EventPlayer()].chat_msg;
	name = StringSub( name, StringFind(name, " ", c_stringCase) + 1, StringLength(name) ); // remainder of chat message
	
	UnitGroupLoopBegin(libwyv_player[EventPlayer()].context);
	while(!UnitGroupLoopDone()) {
		libwyv_unit_set_name(name, UnitGroupLoopCurrent());
		libwyv_print_output( "Unit [ID: " + libwyv_unit_id(UnitGroupLoopCurrent()) + "] name set to: " + name, EventPlayer() );
		libwyv_unit_cache_update(UnitGroupLoopCurrent(), "@setname", libwyv_player[EventPlayer()].chat_msg);
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	return true;
}

// libwyv_command_setnamecolor
// ==================
// sets a units name to a specific color, where
// @setnamecolor [red] [green] [blue]
// input RGB between 0-256 (by convention), but Color() takes fixed between 0-100,
// so must normalize RGB to 0-100
bool libwyv_command_setnamecolor(bool testConds, bool runActions) {
	fixed r = StringToFixed( StringWord(libwyv_player[EventPlayer()].chat_msg, 2 ) );
	fixed g = StringToFixed( StringWord(libwyv_player[EventPlayer()].chat_msg, 3 ) );
	fixed b = StringToFixed( StringWord(libwyv_player[EventPlayer()].chat_msg, 4 ) );
	color col = Color( r*100/256 , g*100/256 , b*100/256 ); // normalize to 100
	
	UnitGroupLoopBegin(libwyv_player[EventPlayer()].context);
	while(!UnitGroupLoopDone()) {
		libwyv_unit_set_name_color(col, UnitGroupLoopCurrent());
		libwyv_print_text( StringToText("> Unit [ID: " + libwyv_unit_id(UnitGroupLoopCurrent()) + "] name set to: ") + libwyv_unit_get_name(UnitGroupLoopCurrent()), PlayerGroupSingle(EventPlayer()) );
		libwyv_unit_cache_update(UnitGroupLoopCurrent(), "@setnamecolor", libwyv_player[EventPlayer()].chat_msg);
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();
	
	return true;
}
