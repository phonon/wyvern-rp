//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const string LIBWYV_UNIT_NAME_DATA_TABLE_IDENTIFIER = ".NAME";
const string LIBWYV_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER = ".NAME_COLOR";

const int LIBWYV_UNIT_CACHE_MAX_STRING_LENGTH = 500;
const int LIBWYV_UNIT_CACHE_OVERWRITE_CHECK_LIMIT = 10;
const int LIBWYV_UNIT_CACHE_LIMIT = -1;

// Unit custom value indexes:
const int LIBWYV_UNIT_INDEX_ID = 0;				// index for ID
const int LIBWYV_UNIT_INDEX_CACHE_COUNT = 1;		// index for current cache number (num caches)
const int LIBWYV_UNIT_INDEX_FLAG_ATTACH = 2;		// flag for @attach has been used
const int LIBWYV_UNIT_INDEX_FLAG_TINT = 3;			// flag for @tint has been used
const int LIBWYV_UNIT_INDEX_FLAG_SCALE = 4;		// flag for @scale has been used
const int LIBWYV_UNIT_INDEX_FLAG_MS = 5;			// flag for @modelswap has been used
const int LIBWYV_UNIT_INDEX_FLAG_ANIMSPEED = 6;	// flag for @animspeed has been used
const int LIBWYV_UNIT_INDEX_FLAG_PLAY = 7;			// flag for @play has been used
const int LIBWYV_UNIT_INDEX_FLAG_STATBARS = 8;		// flag for @statbars has been used
const int LIBWYV_UNIT_INDEX_FLAG_ROTATE = 9;		// flag for @rotate has been used

const int LIBWYV_UNIT_INDEX_WAYGATE = 15;		// flag for region waygates

const int LIBWYV_UNIT_INDEX_TEXTTAG = 15;		// flag for text tag set

// Each unit given a unique id. Each time unit created, counter increments
int libwyv_unit_id_counter = 1;

// prototypes:
void libwyv_unit_set_id(unit u);
void libwyv_unit_data_remove(unit u);

// libwyv_map_unit_init
// ====================
// - assigns unit IDs to any units preplaced on the map
void libwyv_preplaced_unit_initialize() {
    unitgroup g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

	UnitGroupLoopBegin(g);
	while(!UnitGroupLoopDone()) {
		libwyv_unit_set_id(UnitGroupLoopCurrent());
		UnitSetCustomValue(UnitGroupLoopCurrent(), LIBWYV_UNIT_INDEX_CACHE_COUNT, 1); //set the unit cache value
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();

	return;
}

// libwyv_unit_set_id
// =====================
// sets the unit's id via the custom value stored for unit
void libwyv_unit_set_id(unit u) {
	UnitSetCustomValue( u, LIBWYV_UNIT_INDEX_ID, IntToFixed(libwyv_unit_id_counter));
	libwyv_unit_id_counter += 1;
}

// libwyv_unit_id
// =====================
// returns the unit's id as a string
string libwyv_unit_id(unit u) {
	return FixedToString(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_ID), 0);
}

// libwyv_unit_initialize
// ===================
// runs when unit created (from UnitCreate or from abils)
// sets the unit's id and sets command cache count to 1
bool libwyv_unit_initialize(bool testConds, bool runActions) {
	// if unit already has data initialized -> skip
	if( UnitGetCustomValue( EventUnitCreatedUnit(), LIBWYV_UNIT_INDEX_ID ) > 0 ) {
		return true;
	}
	
	libwyv_unit_set_id(EventUnitCreatedUnit());
	UnitSetCustomValue(EventUnitCreatedUnit(), LIBWYV_UNIT_INDEX_CACHE_COUNT, 1);
	return true;
}

// libwyv_unit_death_data_remove
// =======================
// whenever unit is killed or is removed, must remove unit's cache
// from the data table (to conserve data table memory usage) 
// along with custom name/name color
bool libwyv_unit_death_data_remove(bool testConds, bool runActions) {	
	libwyv_unit_data_remove(EventUnit());
	return true;
}

// libwyv_unit_create
// =====================
// function for creating units, adds unit to player's context
// used for mouse click @spawn command
void libwyv_unit_create(string type, int player, point p, fixed facing) {
	UnitCreate(1, type, c_unitCreateIgnorePlacement, player, p, facing);
	UnitGroupAdd(libwyv_player[EventPlayer()].context, UnitLastCreated());
}

// libwyv_spawn_create_splat
// =====================
// creates the unit splat under the cursor when using mouse-click spawn
// because we cannot get the actor type from a unit, 
// we use a unit as the splat
void libwyv_spawn_create_splat(string type, int player) {
	if(libwyv_player[player].spawn_splat != null) {
		UnitRemove(libwyv_player[player].spawn_splat);
	}
	
	UnitCreate(1, type, 0, player, libwyv_player[player].mouse_position, 270.0);
	libwyv_player[player].spawn_splat = UnitLastCreated();
	
	// set visuals
    UnitSetState(libwyv_player[player].spawn_splat, c_unitStateInvulnerable, true);
    UnitSetState(libwyv_player[player].spawn_splat, c_unitStatePaused, true);
    UnitSetState(libwyv_player[player].spawn_splat, c_unitStateSelectable, false);
    UnitSetState(libwyv_player[player].spawn_splat, c_unitStateTargetable, false);
    UnitSetState(libwyv_player[player].spawn_splat, c_unitStateMoveSuppressed, true);
    UnitSetState(libwyv_player[player].spawn_splat, c_unitStateRadarable, false);
	ActorSend(libNtve_gf_MainActorofUnit(libwyv_player[player].spawn_splat), "SetOpacity .5");
	UnitBehaviorAdd(libwyv_player[player].spawn_splat, LIBWYV_BEHAVIOR_SUPPRESS_COLLISION, libwyv_player[player].spawn_splat, 1);
}

// libwyv_unit_set_name
// ===================
// Sets a unit's custom name into the global data table with format
// [unit_id]_NAME : [name]
void libwyv_unit_set_name(string name, unit u) {
	string key = FixedToString(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_ID), 0) + LIBWYV_UNIT_NAME_DATA_TABLE_IDENTIFIER;
	DataTableSetString(true, key, name);
}

// libwyv_unit_set_name_color
// ===================
// Sets a unit's name color into global data table
// [unit_id]_NAME_COLOR : [name]
void libwyv_unit_set_name_color(color col, unit u) {
	string key = FixedToString(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_ID), 0) + LIBWYV_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER;
	DataTableSetColor(true, key, col);
}

// libwyv_unit_get_name
// ==================
// Gets a unit's custom name from the data table
// if no custom name, default to catalog name
text libwyv_unit_get_name(unit u) {
	text name = StringToText("");
	string unit_id = FixedToString(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_ID), 0);
	
	// check if unit has custom name in data table
	if( DataTableValueExists(true, unit_id + LIBWYV_UNIT_NAME_DATA_TABLE_IDENTIFIER) ) {
		name = StringToText( DataTableGetString(true, unit_id + LIBWYV_UNIT_NAME_DATA_TABLE_IDENTIFIER) );
	}
	else { //get default catalog name
		name = StringExternal(  CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(u), "Name", UnitGetOwner(u)) );
	}
	
	// check if unit name has a custom color in data table
	if( DataTableValueExists(true, unit_id + LIBWYV_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER) ) {
		name = TextWithColor(name, DataTableGetColor(true, unit_id + LIBWYV_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER));
	}
	else { // tint to player's color
		name = TextWithColor(name, ColorFromIndex((PlayerGetColorIndex(UnitGetOwner(u), false)), c_teamColorDiffuse));
	}
	
	return name;
}

// libwyv_unit_data_remove
// ======================
// iterates through the unit's caches in data table and removes them
// -> if unit had a custom setname or setnamecolor, remove these as well
// -> destroy any text tags (labels) associated with unit
void libwyv_unit_data_remove(unit u) {
	string unit_id = FixedToString(UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_ID), 0);
	int i = 1;
	
	// remove caches:
	while(DataTableValueExists(true, unit_id + "." + IntToString(i))) {
		DataTableValueRemove(true, unit_id + "." + IntToString(i));
		i += 1;
	}
	
	// check and remove setname/setnamecolor
	if( DataTableValueExists(true, unit_id + LIBWYV_UNIT_NAME_DATA_TABLE_IDENTIFIER) ) {
		DataTableValueRemove(true, unit_id + LIBWYV_UNIT_NAME_DATA_TABLE_IDENTIFIER);
	}
	if( DataTableValueExists(true, unit_id + LIBWYV_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER) ) {
		DataTableValueRemove(true, unit_id + LIBWYV_UNIT_NAME_COLOR_DATA_TABLE_IDENTIFIER);
	}
	
	// destroy any associated text tags
	if( UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_TEXTTAG) != 0.0 ) {
		TextTagDestroy( FixedToInt( UnitGetCustomValue(u, LIBWYV_UNIT_INDEX_TEXTTAG) ) );
	}
}

// UNIT COMMAND CACHE SYSTEM:
// Caches are the command history of a unit stored in the data table
// specific commands that affect unit visuals, naming, behaviors, weapons
//
// Data table architecture:
// [Key: UNIT_ID.CACHE_NUMBER] : [Value: Cached command string]
//
// To conserve space, certain commands will be overwritten for each actor 
// attached to a unit (e.g. @tint or @scale will overwrite the previous one)
// When a new actor is attached, this overwrite works to the last instance of attach. 
// When commands are to be overwritten, a unit custom value flag is set (see consts).

// libwyv_unit_cache_update_add
// =====================
// directly appends a new command to a unit's data table command cache,
// if there is still room in its current cache.
// else, create add a new cache string and increment cache counter
void libwyv_unit_cache_update_add(unit subject, string unit_id, string user_command) {
	string cache;
	
	if(user_command == "") {
		return;
	}
	
	if(DataTableValueExists(true, unit_id + "." + FixedToString(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT), 0))) {
		cache = DataTableGetString(true, unit_id + "." + FixedToString(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT), 0));
	}
	else {
		cache = "";
	}
	
	if(cache == "") {
		cache = user_command;
		DataTableSetString(true, unit_id + "." + FixedToString(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT), 0), cache);
		return;	
	}
	else if(StringLength(cache + "; " + user_command) <= LIBWYV_UNIT_CACHE_MAX_STRING_LENGTH) {
		cache = cache + "; " + user_command;
		DataTableSetString(true, unit_id + "." + FixedToString(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT), 0), cache);
		return;
	}
	else {
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT, UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT) + 1);
		DataTableSetString(true, unit_id + "." + FixedToString(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT), 0), user_command);
		return;
	}
	
}

// libwyv_unit_cache_update_overwrite
// =======================
// finds previous instance of command and removes it, then adds
// new command (if there is space; see libwyv_unit_cache_update_add)
void libwyv_unit_cache_update_overwrite(unit subject, string unit_id, string command, string user_command) {
	bool cmd_found = false;
	int unit_caches = FixedToInt(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT));
	string cache;
	string cache_next;
	string cmd_next;
	int x;
	int pos_start;
	int pos_end;
	int i = 0;
	
	//narrow to a certain cache number
	//overwrite check added because if check limit is too large, A LOT OF LAG
	while(i < unit_caches && i < LIBWYV_UNIT_CACHE_OVERWRITE_CHECK_LIMIT) {
		if(StringContains(DataTableGetString(true, unit_id + "." + IntToString(unit_caches - i)), command, c_stringAnywhere, c_stringNoCase)) {
			break;
		}
		i += 1;
	}
	if(i == LIBWYV_UNIT_CACHE_OVERWRITE_CHECK_LIMIT || i == unit_caches) { //past overwrite limit or doesnt exist: simply add the command
		libwyv_unit_cache_update_add(subject, unit_id, user_command);
		return;
	}
	
	//search through cache(s) to find previous command
	while(!cmd_found && i < unit_caches) {
		cache = DataTableGetString(true, unit_id + "." + IntToString(unit_caches - i));
		pos_start = StringLength(cache);
		
		// get number of words separated by spaces in the string
		x = 1;
		while(StringWord(cache, x + 1) != "") {
			x += 1;
		}
				
		while(x > 0) {
			if(StringContains(StringWord(cache, x), command, c_stringAnywhere, c_stringNoCase)) { //found match
				cmd_found = true;

				if(x != 1) { //if not first command, set position to ';'
					pos_start = pos_start - StringLength(StringWord(cache, x)); //sets position to '@'
					while(StringSub(cache, pos_start, pos_start) != ";") { //not first cmd: finds the ';'
						pos_start -= 1;
					}
				}
				else { //this is the first command
					pos_start = 1;
				}
				break;
			}
			pos_start = pos_start - StringLength(StringWord(cache, x));
			while(StringSub(cache, pos_start, pos_start) == " ") {
				pos_start -= 1;
			}
			x -= 1;
		}
		if(cmd_found) {
			break;
		}
		i += 1;
	}
	
	// find the end pos of the command; search till find the '@' of the next command
	// assumption is that only unit commands prefixed with '@' will be cached
	pos_end = pos_start;
	if(pos_start == 1) {
		while(pos_end < StringLength(cache)) {
			if(StringSub(cache, pos_end + 1, pos_end + 1) == "@") {
				break;
			}
			pos_end += 1;
		}
	}
	else {
		while(pos_end < StringLength(cache)) {
			if(StringSub(cache, pos_end + 1, pos_end + 1) == ";") {
				break;
			}
			pos_end += 1;
		}	
	}
		
	//remove the previous command
	cache = StringReplace(cache, "", pos_start, pos_end);
	
	if(i == 0) { //latest cache: only need to update this one
		if(cache == "") { //if cache empty, delete
			DataTableValueRemove(true, unit_id + "." + IntToString(unit_caches));	
		}
		else { //otherwise update it!
			DataTableSetString(true, unit_id + "." + IntToString(unit_caches), cache);
		}
	}
	
	//otherwise update all proceeding caches to ensure they have max possible length < LIBWYV_UNIT_CACHE_MAX_STRING_LENGTH
	while(i > 0) {
		cache_next = DataTableGetString(true, unit_id + "." + IntToString(unit_caches - i + 1));
		
		pos_start = 1;
		pos_end = 1;
		while(pos_end < StringLength(cache_next)) {
			if(StringSub(cache_next, pos_end, pos_end + 1) == "; ") {
				pos_end += 1; //to include the space for removal
				break;
			}
			pos_end += 1;
		}
		
		cmd_next = StringSub(cache_next, pos_start, pos_end);
		if(StringLength(cache + "; " + cmd_next) <= LIBWYV_UNIT_CACHE_MAX_STRING_LENGTH) { //remove comand from next cache, add to previous
			cache = cache + "; " + cmd_next;
			cache_next = StringReplace(cache_next, "", pos_start, pos_end);
			
			DataTableSetString(true, unit_id + "." + IntToString(unit_caches - i), cache);
			if(cache_next == "") { //the latest cache is now empty; update unit
				DataTableValueRemove(true, unit_id + "." + IntToString(unit_caches - i + 1));
				UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT, IntToFixed(unit_caches - 1));
				unit_caches -= 1;
				break;
			}
			else {
				DataTableSetString(true, unit_id + "." + IntToString(unit_caches - i + 1), cache_next);
			}
			
			//now the check repeats
		}
		else {
			//go to the next cache
			i -= 1; 
			cache = DataTableGetString(true, unit_id + "." + IntToString(unit_caches - i));
		}
	}
	
	//now add the new command to the caches
	libwyv_unit_cache_update_add(subject, unit_id, user_command);
}

// libwyv_unit_cache_update
// =====================
// redirects to proper cache update function depending on command:
// -> certain commands will overwrite previous (save space)
// -> other commands always added because dont know whether its safe
//    or not to rewrite previous instance
void libwyv_unit_cache_update(unit subject, string command, string user_command) {
	string unit_id = FixedToString(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_ID), 0);
	
	//if map has cache limit, checks for limit
	if( LIBWYV_UNIT_CACHE_LIMIT != -1 && FixedToInt(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_CACHE_COUNT)) > LIBWYV_UNIT_CACHE_LIMIT ) {
		return;
	}
	
	// VISUALS - attach, modelswap, tint, scale, animspeed, play
	// only overwrite for specific instances of an actor (after attach)
	if(command == "@attach") {
		libwyv_unit_cache_update_add(subject, unit_id, user_command);
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_TINT, 0); //"reset" tint
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_SCALE, 0); //"reset" scale
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_MS, 0); //"reset" modelswap
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_ANIMSPEED, 0); //"reset" animspeed
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_PLAY, 0); //"reset" play
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_STATBARS, 0); //"reset" statbars
		UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_ROTATE, 0); //"reset" rotate
		return;
	}
	else if(command == "@tint") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_TINT) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_TINT, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	else if(command == "@scale") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_SCALE) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_SCALE, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	else if(command == "@modelswap") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_MS) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_MS, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	else if(command == "@animspeed") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_ANIMSPEED) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_ANIMSPEED, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	else if(command == "@play") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_PLAY) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_PLAY, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	else if(command == "@statbars") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_STATBARS) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_STATBARS, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	else if(command == "@rotate") {
		if(UnitGetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_ROTATE) != 1) {
			libwyv_unit_cache_update_add(subject, unit_id, user_command);
			UnitSetCustomValue(subject, LIBWYV_UNIT_INDEX_FLAG_ROTATE, 1);
			return;
		}
		else {
			libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
			return;
		}
	}
	// Never overwrite these commands: always add a new command to cache
	else if( command == "@actormsg" ||
			 command == "@addbehavior" || 
			 command == "@removebehavior" ||
			 command == "@addweapon" ||
			 command == "@removeweapon" ||
			 command == "@effect"
			 ) {
		libwyv_unit_cache_update_add(subject, unit_id, user_command);
		return;
	}
	// These commands always override previous when used, so always overwrite
	else if( command == "@adddamage" ||
			 command == "@addrange" ||
			 command == "@height" ||
			 command == "@invulnerable" ||
			 command == "@setname" ||
			 command == "@setnamecolor" ||
			 command == "@subtitle" ||
			 command == "@renameall" ||
			 command == "@color" || 
			 command == "@tooltip" ||
			 command == "@weaponspeed" ||
			 command == "@weaponspeedall" ||
			 command == "@armor" ||
			 command == "@shieldsarmor" ) {
		libwyv_unit_cache_update_overwrite(subject, unit_id, command, user_command);
		return;
	}
	
}

// libwyv_unit_cache_undo
// =====================
// Undos previous commands (only those that were cached) by rebuilding
// a unit using caches up to (-X commands), where X is undo depth specified by:
// syntax: @undo X
unit libwyv_unit_cache_undo(unit subject_orig, int undo_iterations) {
	int cache = 1;
	int iterations = undo_iterations;
	int pos_start;
	string unit_cache_current;
	string unit_id;
	string unit_id_old = FixedToString(UnitGetCustomValue(subject_orig, LIBWYV_UNIT_INDEX_ID), 0);
	unit subject_undo;
	unitgroup g;
	
	//create new and remove old
	UnitCreate(1, UnitGetType(subject_orig), c_unitCreateIgnorePlacement, UnitGetOwner(subject_orig), 
		UnitGetPosition(subject_orig), UnitGetFacing(subject_orig));

	subject_undo = UnitLastCreated();
	//set new undo unit cache
	libwyv_unit_set_id( subject_undo );
	DataTableSetBool(true, unit_id + ".unit", true);
	UnitSetCustomValue(subject_undo, LIBWYV_UNIT_INDEX_CACHE_COUNT, 1); //set the unit cache value
	UnitSetCustomValue(UnitLastCreated(), 16, 0); //set the modelswap flag to 0
	
	//set undo units properties
	UnitSetState(subject_undo, c_unitStateHidden, 
		UnitTestState(subject_orig, c_unitStateHidden));
	UnitSetState(subject_undo, c_unitStateHighlightable, 
		UnitTestState(subject_orig, c_unitStateHighlightable));
	UnitSetState(subject_undo, c_unitStateIgnoreTerrainZ, 
		UnitTestState(subject_orig, c_unitStateIgnoreTerrainZ));
	UnitSetState(subject_undo, c_unitStateFidget, 
		UnitTestState(subject_orig, c_unitStateFidget));
	UnitSetState(subject_undo, c_unitStateTargetable, 
		UnitTestState(subject_orig, c_unitStateTargetable));
	UnitSetState(subject_undo, c_unitStateTooltipable, 
		UnitTestState(subject_orig, c_unitStateTooltipable));
	UnitSetState(subject_undo, c_unitStateCursorable, 
		UnitTestState(subject_orig, c_unitStateCursorable));
	UnitSetState(subject_undo, c_unitStateHighlighted, 
		UnitTestState(subject_orig, c_unitStateHighlighted));
	UnitSetState(subject_undo, c_unitStateUsingSupply, 
		UnitTestState(subject_orig, c_unitStateUsingSupply));
	UnitSetPropertyFixed(subject_undo, c_unitPropLifeMax, 
		UnitGetPropertyFixed(subject_orig, c_unitPropLifeMax, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropLife, 
		UnitGetPropertyFixed(subject_orig, c_unitPropLife, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropLifeRegen, 
		UnitGetPropertyFixed(subject_orig, c_unitPropLifeRegen, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropEnergyMax, 
		UnitGetPropertyFixed(subject_orig, c_unitPropEnergyMax, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropEnergy, 
		UnitGetPropertyFixed(subject_orig, c_unitPropEnergy, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropEnergyRegen, 
		UnitGetPropertyFixed(subject_orig, c_unitPropEnergyRegen, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropShieldsMax, 
		UnitGetPropertyFixed(subject_orig, c_unitPropShieldsMax, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropShields, 
		UnitGetPropertyFixed(subject_orig, c_unitPropShields, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropShieldsRegen, 
		UnitGetPropertyFixed(subject_orig, c_unitPropShieldsRegen, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropKills, 
		UnitGetPropertyFixed(subject_orig, c_unitPropKills, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropMovementSpeed, 
		UnitGetPropertyFixed(subject_orig, c_unitPropMovementSpeed, true));
	UnitSetPropertyFixed(subject_undo, c_unitPropResources, 
		UnitGetPropertyFixed(subject_orig, c_unitPropResources, true));

	
	//undo iterations listed in original units cache
	cache = FixedToInt(UnitGetCustomValue(subject_orig, LIBWYV_UNIT_INDEX_CACHE_COUNT));
	while(iterations > 0 && cache > 0) {
		if(DataTableValueExists(true, unit_id_old + "." + IntToString(cache))) {
			unit_cache_current = DataTableGetString(true, unit_id_old + "." + IntToString(cache));
			pos_start = StringLength(unit_cache_current);
			
			while(pos_start > 0 && iterations > 0) {
				if(StringSub(unit_cache_current, pos_start, pos_start) == ";") {
					//command found: remove it
					unit_cache_current = StringReplace(unit_cache_current, "", pos_start, StringLength(unit_cache_current));
					iterations -= 1;
				}
				pos_start -= 1;
			}
			if(pos_start == 0) {
				DataTableValueRemove(true, unit_id_old + "." + IntToString(cache));
				iterations -= 1;
			}
			else {
				DataTableSetString(true, unit_id_old + "." + IntToString(cache), unit_cache_current);		
			}
		}
		cache -= 1;
	}
	
	//remove the old unit
	UnitRemove(subject_orig);
	
	//now parse all the commands from original unit to the new unit
	//libwyv_unit_cache_isCopying[UnitGetOwner(subject_undo)] = true;
	
	cache = 1;
	g = UnitGroupEmpty();
	UnitGroupAdd(g, subject_undo);
	
	libwyv_player[UnitGetOwner(subject_undo)].context = g;
	while(DataTableValueExists(true, unit_id_old + "." + IntToString(cache))) {
		//libwyv_chat_parsechat(UnitGetOwner(subject_undo), DataTableGetString(true, unit_id_old + "." + IntToString(cache)), libwyv_chat_recursion_limit);		
		cache += 1;
	}
	//libwyv_unit_cache_isCopying[UnitGetOwner(subject_undo)] = false;
	
	//remove old unit's cache
	libwyv_unit_data_remove(subject_orig);
	
	//finally, write how many commands undid and return the unit
	libwyv_print_success( "(Unit: " + UnitGetType(subject_undo) + ") " + "Undid " + IntToString(undo_iterations - iterations) + " commands", EventPlayer() );
	
	return subject_undo;
}
