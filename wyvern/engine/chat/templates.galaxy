//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const string LIBWYV_BANK_SECTION_TEMPLATE = "template";
const string LIBWYV_TEMPLATE_TOKEN_IDENTIFIER = "%";

// libwyv_template_command_redirect
// ===================
// gets "template ..." command from parser, redirects to function
bool libwyv_template_command_redirect(string command, int player) {
	string subcommand = StringWord(command, 2);
	string template = "";
	string content = "";
	
	// format for creating templates is:
	// "template create foo %a %b = @cmd1 %a; @cmd2 %b"
	// -> string between "template create" and "=" is the template
	// -> first word of template becomes bank key
	// -> bank value stored is: "%a %b = @cmd1 %a; @cmd2 %b"
	if( StringEqual(subcommand, "create", c_stringNoCase) ) { 
		if( !StringContains(libwyv_player[player].chat_msg, "=", c_stringAnywhere, c_stringNoCase) ) {
			libwyv_print_error("IMPROPER TEMPLATE: NO ASSIGNMENT", player);
			return true;
		}
		
		template = StringWord(libwyv_player[player].chat_msg, 3);
		// verify template name is proper:
		// if(StringSub(template, 1, 1) == LIBWYV_TEMPLATE_TOKEN_IDENTIFIER) {
			// libwyv_print_error("TEMPLATE NAME CANNOT BE A TOKEN", player);
			// return true;
		// }
		if( StringContains(template, "=", c_stringAnywhere, c_stringNoCase) ) {
			libwyv_print_error("TEMPLATE NAME CANNOT HAVE AN \'=\' SYMBOL", player);
			return true;
		}
		
		// content: remove "template" and "create" and the template command from chat msg string
		content = StringReplaceWord(libwyv_player[player].chat_msg, "template", "", 1, c_stringNoCase);
		content = StringReplaceWord(content, "create", "", 1, c_stringNoCase);
		content = libwyv_string_trim( StringSub(content, StringFind(content, template, c_stringNoCase) + StringLength(template) + 1, StringLength(content)) );
				
		if( content != "" ) {
			libwyv_bank_create(LIBWYV_BANK_SECTION_TEMPLATE, StringWord(template, 1), content, player);
			libwyv_print_success("TEMPLATE CREATED: " + template + " " + StringSub(content, 1, StringFind(content, "=", c_stringNoCase) - 1) + "\n" 
								  + "[\'" + libwyv_string_trim( StringSub(content, StringFind(content, "=", c_stringNoCase) + 1, StringLength(content)) ) + "\']", player);
		}
		else {
			libwyv_print_error("TEMPLATE CANNOT BE EMPTY", player);
		}
		
		return true;
	}
	else if( StringEqual(subcommand, "remove", c_stringNoCase) ) {
		template = StringWord(command, 3);
		if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_TEMPLATE, template) ) {
			libwyv_bank_remove(LIBWYV_BANK_SECTION_TEMPLATE, template, player);
			libwyv_print_success("TEMPLATE REMOVED: " + template, player);
		}
		else {
			libwyv_print_error("TEMPLATE " + template + " DOES NOT EXIST", player);
		}
	}
	else if( StringEqual(subcommand, "removeall", c_stringNoCase) ) {
		libwyv_bank_section_remove_all(LIBWYV_BANK_SECTION_TEMPLATE, player);
		libwyv_print_success("ALL TEMPLATES REMOVED", player);
	}
	else if( StringEqual(subcommand, "list", c_stringNoCase) ) {
		libwyv_bank_section_dump(LIBWYV_BANK_SECTION_TEMPLATE, player);
	}
	else if( StringEqual(subcommand, "print", c_stringNoCase) ) {
		libwyv_bank_key_content_dump(LIBWYV_BANK_SECTION_TEMPLATE, StringWord(command, 3), player);
	}
	else if( BankKeyExists(libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_TEMPLATE, subcommand) ) {
		libwyv_bank_key_content_dump(LIBWYV_BANK_SECTION_TEMPLATE, subcommand, player);
	}
	else {
		libwyv_print_error("INVALID TEMPLATE COMMAND", player);
	}
	
	return false;
}

// libwyv_template
// =================
// gets the content of template from bank and replaces tokens with 
// values from player's chat command
string libwyv_template(string template, int player) {
	string evaluated = BankValueGetAsString( libwyv_player[player].bank_storage, LIBWYV_BANK_SECTION_TEMPLATE, StringWord(template, 1) ) ;
	string token_identifiers = StringSub(evaluated, 1, StringFind(evaluated, "=", c_stringNoCase) - 1);
	int i = 1;
	
	evaluated = libwyv_string_trim( StringSub( evaluated, StringFind(evaluated, "=", c_stringNoCase) + 1, StringLength(evaluated) ) );
	
	// must use index i+1 for template because that string includes the template command itself
	while( StringWord(token_identifiers, i) != "" && StringWord(template, i + 1) != "" ) {
		evaluated = StringReplaceWord(evaluated, StringWord(token_identifiers, i), StringWord(template, i + 1), c_stringReplaceAll, c_stringNoCase);
		i += 1;
	}
	
	return evaluated;
}
