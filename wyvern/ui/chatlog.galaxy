//=========================================================
//		Wyvern Roleplaying Engine
//		Copyright (c) 2014 , Xethyr.407 [NA] / @90-proof
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


static const string LIBWYV_DATA_TABLE_CHATLOG_FILTER = "ui_chatlog_filter ";

// indent used for chatlog msg that are part of a previous msg
static const string LIBWYV_UI_CHATLOG_INDENT = "              ";

// number of players on the filter list
static int libwyv_chatlog_nplayers = 0;

// player message author filter for chatlog messages
// filter checkboxes correspond to filter array index-1
static int[LIBWYV_MAX_PLAYERS] libwyv_ui_chatlog_filter_list;

// actual flags for whether a player's messages in chatlog are to be filtered
// format for array is [Player][Flag], where flag is the player int of the
// target player for filtering.
// False (default) - not filtered
// True - filtered (msg does not appear in chat log)
static bool[LIBWYV_MAX_PLAYERS][LIBWYV_MAX_PLAYERS] libwyv_chatlog_filter;

// dialog for the chat log
int libwyv_ui_chatlog;

// dialog controls for the chat log
int libwyv_ui_chatlog_list;
static int libwyv_ui_chatlog_filter_last = 0; // last player check in filter list

// libwyv_ui_chatlog_init
// ==================
// Creates the chat log ui panel
void libwyv_ui_chatlog_init() {
	int i;
	libwyv_ui_chatlog = libwyv_create_dialog(820, 600, c_anchorRight, 60, -150);

	// create the list used for chatlog messages as list items
	libwyv_ui_chatlog_list = libwyv_create_dialog_list(libwyv_ui_chatlog, 600, 580, c_anchorTopLeft, 10, 10);

	// create "Players:" label for player filter list
	libwyv_create_dialog_label(libwyv_ui_chatlog, 120, 40, c_anchorTopRight, 90, 10, "Players:", LIBWYV_UI_HEADER3);

	for( i = 0; i < LIBWYV_NLOGGED_MSG; i += 1 ) {
		TriggerAddEventGeneric(TriggerCreate("libwyv_ui_chatlog_update"), LIBWYV_EVENT_CHATLOG + IntToString(i));
	}
}

// libwyv_ui_chatlog_init
// ===================
// adds a player's name to the list of players to filter in the
void libwyv_ui_chatlog_init_player(int player) {
	int checkbox = libwyv_create_dialog_checkbox(libwyv_ui_chatlog, 30, 30, c_anchorTopRight, 175, 50);
	int playername = libwyv_create_dialog_label_text(libwyv_ui_chatlog, 200, 20, c_anchorTopRight, 14, 12, libwyv_player_name_colored(player), LIBWYV_UI_HEADER5);
	DialogControlSetPositionRelative(playername, PlayerGroupAll(), c_anchorLeft, checkbox, c_anchorRight, 0, 0);

	// if a previous checkbox has been created, anchor new checkbox to previous
	if( libwyv_ui_chatlog_filter_last != 0 ) {
		DialogControlSetPositionRelative(checkbox, PlayerGroupAll(), c_anchorTop, libwyv_ui_chatlog_filter_last, c_anchorBottom, 0, 0);
	}

	// set the checkbox default marked (no players filtered)
	libNtve_gf_SetDialogItemChecked(checkbox, true, PlayerGroupAll());

	// set the player for this checkbox
	DataTableSetInt(true, LIBWYV_DATA_TABLE_CHATLOG_FILTER + IntToString(checkbox), player);
	//libwyv_ui_chatlog_filter_list[libwyv_chatlog_nplayers] = player;
	libwyv_chatlog_nplayers += 1;

	// add trigger event for toggling player filter
	TriggerAddEventDialogControl(TriggerCreate("libwyv_ui_chatlog_filter_toggle"), c_playerAny, checkbox, c_triggerControlEventTypeChecked);

	// set the global var for the last created checkbox
	libwyv_ui_chatlog_filter_last = checkbox;
}

// libwyv_ui_chatlog_populate
// =======================
// Removes all entries and populates the player chatlog ui list from
// the Wyvern chatlog
static void libwyv_ui_chatlog_populate(int player) {
	int counter = LIBWYV_NLOGGED_MSG;
	int i;
	text msg;

	// remove all existing messages
	DialogControlRemoveAllItems(libwyv_ui_chatlog_list, PlayerGroupSingle(player));

	if( libwyv_chatlog_cycled ) {
		i = (libwyv_chatlog_counter + 1) % LIBWYV_NLOGGED_MSG;
		// TODO: do a cycled read of the chatlog
	} else { // hasnt cycled, start chatlog populate from start
		i = 0;
		for( i = 0; i < libwyv_chatlog_counter; i += 1 ) {
			if( !libwyv_chatlog_filter[player][libwyv_chatlog[i].author] ) {
				if( libwyv_chatlog[i].is_part_of_prev ) {
					msg = StringToText(LIBWYV_UI_CHATLOG_INDENT) + libwyv_chatlog[i].msg;
				} else {
					msg = libwyv_chatlog[i].timestamp + libwyv_chatlog[i].msg;
				}
				DialogControlAddItem(libwyv_ui_chatlog_list, PlayerGroupSingle(player), msg);
			}
		}
	}

}

// libwyv_ui_chatlog_filter_toggle
bool libwyv_ui_chatlog_filter_toggle(bool testConds, bool runActions) {
	int checkbox = EventDialogControl();
	int player = EventPlayer();
	int filtered = 	DataTableGetInt(true, LIBWYV_DATA_TABLE_CHATLOG_FILTER + IntToString(checkbox));
	libwyv_chatlog_filter[player][filtered] = !libNtve_gf_DialogItemIsChecked(checkbox, player);

	// update chat log based on filter
	libwyv_ui_chatlog_populate(player);

	return true;
}

// libwyv_ui_chatlog_update
// ==================
// Responds to a LIBWYV_EVENT_CHATLOG updated chatlog event:
// Adds just the newest added entry to the chatlog.
// TODO: filter the added entry by player filter
bool libwyv_ui_chatlog_update(bool testConds, bool runActions) {
	int i = StringToInt(StringWord(EventGenericName(), 2));
	int player;
	text msg;
	bool[LIBWYV_MAX_PLAYERS] chatlog_filter;

	if( libwyv_chatlog[i].is_part_of_prev ) {
		msg = StringToText(LIBWYV_UI_CHATLOG_INDENT) + libwyv_chatlog[i].msg;
	} else {
		msg = libwyv_chatlog[i].timestamp + libwyv_chatlog[i].msg;
	}

	for( player = 1; player < LIBWYV_MAX_PLAYERS; player += 1 ) {
		if( PlayerType(player) == c_playerTypeUser && PlayerStatus(player) == c_playerStatusActive ) {
			//libwyv_ui_chatlog_populate(p);
			DialogControlAddItem(libwyv_ui_chatlog_list, PlayerGroupSingle(player), msg);
		}
	}

	return true;
}
